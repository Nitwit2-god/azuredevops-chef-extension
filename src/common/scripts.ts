/**
 * Script library holds the Base64 encoded string of the PowerShell and Shell based scripts
 * for installing Chef components using Omnbibus
 *
 * It also includes the scripts required to download and install Habitat
 */

import * as SHA256 from "crypto-js/sha256";
import { readFileSync } from "fs";
import * as tl from "azure-pipelines-task-lib"; // task library for Azure DevOps
import { sprintf } from "sprintf-js";

export class Scripts {

  // Windows script
  private WindowsInstallSHA256 = "9F8198782189A4BE162141EA94627B75D696FD10F3834E2F7292A7855E7C845C";
  private WindowsInstall = `bmV3LW1vZHVsZSAtbmFtZSBPbW5pdHJ1Y2sgLXNjcmlwdGJsb2NrIHsKW0NvbnNvbGVdOjpPdXRw
dXRFbmNvZGluZyA9IE5ldy1PYmplY3QgLXR5cGVuYW1lIFN5c3RlbS5UZXh0LkFTQ0lJRW5jb2Rp
bmcKW1N5c3RlbS5OZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlY3VyaXR5UHJvdG9jb2wgPSBb
U3lzdGVtLk5ldC5TZWN1cml0eVByb3RvY29sVHlwZV0nVGxzLFRsczExLFRsczEyJwoKZnVuY3Rp
b24gR2V0LVBsYXRmb3JtVmVyc2lvbiB7CiAgc3dpdGNoIC1yZWdleCAoKEdldC1XaW4zMk9TKS52
ZXJzaW9uKSB7CiAgICAnMTBcLjBcLlxkKycgeyRwbGF0Zm9ybV92ZXJzaW9uID0gJzIwMTYnfQog
ICAgJzZcLjNcLlxkKycgIHskcGxhdGZvcm1fdmVyc2lvbiA9ICcyMDEycjInfQogICAgJzZcLjJc
LlxkKycgIHskcGxhdGZvcm1fdmVyc2lvbiA9ICcyMDEyJ30KICAgICc2XC4xXC5cZCsnICB7JHBs
YXRmb3JtX3ZlcnNpb24gPSAnMjAwOHIyJ30KICAgICc2XC4wXC5cZCsnICB7JHBsYXRmb3JtX3Zl
cnNpb24gPSAnMjAwOCd9CiAgfQoKICBpZihUZXN0LVBhdGggJ0hLTE06XFNPRlRXQVJFXE1pY3Jv
c29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXFNlcnZlclxTZXJ2ZXJMZXZlbHMnKSB7CiAg
ICAkbGV2ZWxzID0gR2V0LUl0ZW1Qcm9wZXJ0eSAnSEtMTTpcU09GVFdBUkVcTWljcm9zb2Z0XFdp
bmRvd3MgTlRcQ3VycmVudFZlcnNpb25cU2VydmVyXFNlcnZlckxldmVscycKICAgIGlmKCRsZXZl
bHMuTmFub1NlcnZlciAtZXEgMSkgeyAkcGxhdGZvcm1fdmVyc2lvbiArPSAnbmFubycgfQogIH0K
CiAgcmV0dXJuICRwbGF0Zm9ybV92ZXJzaW9uCn0KCmZ1bmN0aW9uIEdldC1QbGF0Zm9ybUFyY2hp
dGVjdHVyZSB7CiAgaWYgKChHZXQtV2luMzJPUykub3NhcmNoaXRlY3R1cmUgLWxpa2UgJzY0LWJp
dCcpIHsKICAgICRhcmNoaXRlY3R1cmUgPSAneDg2XzY0JwogIH0gZWxzZSB7CiAgICAkYXJjaGl0
ZWN0dXJlID0gJ2kzODYnCiAgfQogIHJldHVybiAkYXJjaGl0ZWN0dXJlCn0KCmZ1bmN0aW9uIEdl
dC1XaW4zMk9TIHsKICBpZighJGdsb2JhbDp3aW4zMk9TKQogIHsKICAgICRnbG9iYWw6d2luMzJP
UyA9IEdldC1XTUlRdWVyeSB3aW4zMl9vcGVyYXRpbmdzeXN0ZW0KICB9CiAgJGdsb2JhbDp3aW4z
Mk9TCn0KCmZ1bmN0aW9uIE5ldy1VcmkgewogIHBhcmFtICgkYmFzZXVyaSwgJG5ld3VyaSkKCiAg
dHJ5IHsKICAgICRiYXNlID0gbmV3LW9iamVjdCBTeXN0ZW0uVXJpICRiYXNldXJpCiAgICBuZXct
b2JqZWN0IFN5c3RlbS5VcmkgJGJhc2UsICRuZXd1cmkKICB9CiAgY2F0Y2ggW1N5c3RlbS5NYW5h
Z2VtZW50LkF1dG9tYXRpb24uTWV0aG9kSW52b2NhdGlvbkV4Y2VwdGlvbl17CiAgICBXcml0ZS1F
cnJvciAiJCgkXy5leGNlcHRpb24ubWVzc2FnZSkiCiAgICB0aHJvdyAkXy5leGNlcHRpb24KICB9
Cn0KCmZ1bmN0aW9uIEdldC1XZWJDb250ZW50IHsKICBwYXJhbSAoJHVyaSwgJGZpbGVwYXRoKQoK
ICB0cnkgewogICAgaWYoJFBTVmVyc2lvblRhYmxlLlBTRWRpdGlvbiAtZXEgJ0NvcmUnKSB7CiAg
ICAgIEdldC1XZWJDb250ZW50T25Db3JlICR1cmkgJGZpbGVwYXRoCiAgICB9CiAgICBlbHNlIHsK
ICAgICAgR2V0LVdlYkNvbnRlbnRPbkZ1bGxOZXQgJHVyaSAkZmlsZXBhdGgKICAgIH0KICB9CiAg
Y2F0Y2ggewogICAgJGV4Y2VwdGlvbiA9ICRfLkV4Y2VwdGlvbgogICAgV3JpdGUtSG9zdCAiVGhl
cmUgd2FzIGFuIGVycm9yOiAiCiAgICBkbyB7CiAgICAgIFdyaXRlLUhvc3QgImB0JCgkZXhjZXB0
aW9uLm1lc3NhZ2UpIgogICAgICAkZXhjZXB0aW9uID0gJGV4Y2VwdGlvbi5pbm5lcmV4Y2VwdGlv
bgogICAgfSB3aGlsZSAoJGV4Y2VwdGlvbikKICAgIHRocm93ICJGYWlsZWQgdG8gZG93bmxvYWQg
ZnJvbSAkdXJpLiIKICB9Cn0KCmZ1bmN0aW9uIEdldC1XZWJDb250ZW50T25GdWxsTmV0IHsKICBw
YXJhbSAoJHVyaSwgJGZpbGVwYXRoKQoKICAkcHJveHkgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBT
eXN0ZW0uTmV0LldlYlByb3h5CiAgJHdjID0gbmV3LW9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVu
dAogICR3Yy5IZWFkZXJzLkFkZCgidXNlci1hZ2VudCIsICJtaXhsaWItaW5zdGFsbC8zLjExLjIx
IikKICAkcHJveHkuQWRkcmVzcyA9ICRlbnY6aHR0cF9wcm94eQogICR3Yy5Qcm94eSA9ICRwcm94
eQoKICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGZpbGVwYXRoKSkgewogICAgJHdjLmRv
d25sb2Fkc3RyaW5nKCR1cmkpCiAgfQogIGVsc2UgewogICAgJHdjLmRvd25sb2FkZmlsZSgkdXJp
LCAkZmlsZXBhdGgpCiAgfQp9CgpmdW5jdGlvbiBHZXQtV2ViQ29udGVudE9uQ29yZSB7CiAgcGFy
YW0gKCR1cmksICRmaWxlcGF0aCkKCiAgJGhhbmRsZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQu
SHR0cC5IdHRwQ2xpZW50SGFuZGxlcgogICRjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQu
SHR0cC5IdHRwQ2xpZW50KCRoYW5kbGVyKQogICRjbGllbnQuRGVmYXVsdFJlcXVlc3RIZWFkZXJz
LlVzZXJBZ2VudC5QYXJzZUFkZCgibWl4bGliLWluc3RhbGwvMy4xMS4yMSIpCiAgJGNsaWVudC5U
aW1lb3V0ID0gTmV3LU9iamVjdCBTeXN0ZW0uVGltZVNwYW4oMCwgMzAsIDApCiAgJGNhbmNlbFRv
a2VuU291cmNlID0gW1N5c3RlbS5UaHJlYWRpbmcuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2VdOjpu
ZXcoKQogICRyZXNwb25zZU1zZyA9ICRjbGllbnQuR2V0QXN5bmMoW1N5c3RlbS5VcmldOjpuZXco
JHVyaSksICRjYW5jZWxUb2tlblNvdXJjZS5Ub2tlbikKICAkcmVzcG9uc2VNc2cuV2FpdCgpCiAg
aWYgKCEkcmVzcG9uc2VNc2cuSXNDYW5jZWxlZCkgewogICAgJHJlc3BvbnNlID0gJHJlc3BvbnNl
TXNnLlJlc3VsdAogICAgaWYgKCRyZXNwb25zZS5Jc1N1Y2Nlc3NTdGF0dXNDb2RlKSB7CiAgICAg
IGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkZmlsZXBhdGgpKSB7CiAgICAgICAgJHJlc3Bv
bnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQKICAgICAgfQogICAgICBlbHNl
IHsKICAgICAgICAkZG93bmxvYWRlZEZpbGVTdHJlYW0gPSBbU3lzdGVtLklPLkZpbGVTdHJlYW1d
OjpuZXcoJGZpbGVwYXRoLCBbU3lzdGVtLklPLkZpbGVNb2RlXTo6Q3JlYXRlLCBbU3lzdGVtLklP
LkZpbGVBY2Nlc3NdOjpXcml0ZSkKICAgICAgICAkY29weVN0cmVhbU9wID0gJHJlc3BvbnNlLkNv
bnRlbnQuQ29weVRvQXN5bmMoJGRvd25sb2FkZWRGaWxlU3RyZWFtKQogICAgICAgICRjb3B5U3Ry
ZWFtT3AuV2FpdCgpCiAgICAgICAgJGRvd25sb2FkZWRGaWxlU3RyZWFtLkNsb3NlKCkKICAgICAg
ICBpZiAoJGNvcHlTdHJlYW1PcC5FeGNlcHRpb24gLW5lICRudWxsKSB7CiAgICAgICAgICB0aHJv
dyAkY29weVN0cmVhbU9wLkV4Y2VwdGlvbgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoK
ZnVuY3Rpb24gVGVzdC1Qcm9qZWN0UGFja2FnZSB7CiAgW2NtZGxldGJpbmRpbmcoKV0KICBwYXJh
bSAoJFBhdGgsICRBbGdvcml0aG0gPSAnU0hBMjU2JywgJEhhc2gpCiAgaWYgKCEkZW52OlZhbGlk
X1Byb2plY3RQYWNrYWdlKXsKICAgIFdyaXRlLVZlcmJvc2UgIlRlc3RpbmcgdGhlICRBbGdvcml0
aG0gaGFzaCBmb3IgJHBhdGguIgogICAgJEFjdHVhbEhhc2ggPSAoQ3VzdG9tLUdldEZpbGVIYXNo
IC1BbGdvcml0aG0gJEFsZ29yaXRobSAtUGF0aCAkUGF0aCkuSGFzaC5Ub0xvd2VyKCkKCiAgICBX
cml0ZS1WZXJib3NlICJgdERlc2lyZWQgSGFzaCAtICckSGFzaCciCiAgICBXcml0ZS1WZXJib3Nl
ICJgdEFjdHVhbCBIYXNoICAtICckQWN0dWFsSGFzaCciCiAgICAkZW52OlZhbGlkX1Byb2plY3RQ
YWNrYWdlID0gJEFjdHVhbEhhc2ggLWVxICRIYXNoCiAgICBpZiAoLW5vdCAkZW52OlZhbGlkX1By
b2plY3RQYWNrYWdlKSB7CiAgICAgIFdyaXRlLUVycm9yICJGYWlsZWQgdG8gdmFsaWRhdGUgdGhl
IGRvd25sb2FkZWQgaW5zdGFsbGVyLiAgVGhlIGV4cGVjdGVkICRBbGdvcml0aG0gaGFzaCB3YXMg
JyRIYXNoJyBhbmQgdGhlIGFjdHVhbCBoYXNoIHdhcyAnJEFjdHVhbEhhc2gnIGZvciAkcGF0aCIK
ICAgIH0KICB9CiAgcmV0dXJuICRlbnY6VmFsaWRfUHJvamVjdFBhY2thZ2UKfQoKZnVuY3Rpb24g
Q3VzdG9tLUdldEZpbGVIYXNoICgkUGF0aCwgJEFsZ29yaXRobSkgewogIGZ1bmN0aW9uIGRpc3Bv
c2FibGUoJG8peygkbyAtaXMgW0lEaXNwb3NhYmxlXSkgLWFuZCAoKCRvIHwgZ2V0LW1lbWJlciB8
IGZvcmVhY2gtb2JqZWN0IHskXy5uYW1lfSkgLWNvbnRhaW5zICdEaXNwb3NlJyl9CiAgZnVuY3Rp
b24gdXNlKCRvYmosIFtzY3JpcHRibG9ja10kc2Ipe3RyeSB7JiAkc2J9IGNhdGNoIFtleGNlcHRp
b25de3Rocm93ICRffSBmaW5hbGx5IHtpZiAoZGlzcG9zYWJsZSAkb2JqKSB7JG9iai5EaXNwb3Nl
KCl9fSB9CiAgJFBhdGggPSAocmVzb2x2ZS1wYXRoICRQYXRoKS5wcm92aWRlcnBhdGgKICAkaGFz
aCA9IEB7QWxnb3JpdGhtID0gJEFsZ29yaXRobTsgUGF0aCA9ICRQYXRofQogIHVzZSAoJGMgPSBH
ZXQtU0hBMjU2Q29udmVydGVyKSB7CiAgICB1c2UgKCRpbiA9IChnaSAkUGF0aCkuT3BlblJlYWQo
KSkgewogICAgICAkaGFzaC5IYXNoID0gKFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkYy5Db21w
dXRlSGFzaCgkaW4pKSkuUmVwbGFjZSgiLSIsICIiKS5Ub1VwcGVyKCkKICAgIH0KICB9CiAgcmV0
dXJuICRoYXNoCn0KCmZ1bmN0aW9uIEdldC1TSEEyNTZDb252ZXJ0ZXIgewogIGlmICgkKElzLUZJ
UFMpIC1nZSAxKSB7CiAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBTZWN1cml0eS5DcnlwdG9ncmFw
aHkuU0hBMjU2Q25nCiAgfSBlbHNlIHsKICAgIGlmKCRQU1ZlcnNpb25UYWJsZS5QU0VkaXRpb24g
LWVxICdDb3JlJykgewogICAgICBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5TSEEyNTZd
OjpDcmVhdGUoKQogICAgfQogICAgZWxzZSB7CiAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFNl
Y3VyaXR5LkNyeXB0b2dyYXBoeS5TSEEyNTZNYW5hZ2VkCiAgICB9CiAgfQp9CgpmdW5jdGlvbiBJ
cy1GSVBTIHsKICBpZiAoISRlbnY6Zmlwcyl7CiAgICAkZW52OmZpcHMgPSAoR2V0LUl0ZW1Qcm9w
ZXJ0eSBIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxMc2FcRmlwc0FsZ29y
aXRobVBvbGljeSkuRW5hYmxlZAogIH0KICByZXR1cm4gJGVudjpmaXBzCn0KCmZ1bmN0aW9uIEdl
dC1XTUlRdWVyeSB7CiAgcGFyYW0gKCRjbGFzcykKCiAgaWYoR2V0LUNvbW1hbmQgLU5hbWUgR2V0
LUNpbUluc3RhbmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSB7CiAgICBHZXQtQ2lt
SW5zdGFuY2UgJGNsYXNzCiAgfQogIGVsc2UgewogICAgR2V0LVdtaU9iamVjdCAkY2xhc3MKICB9
Cn0KCmZ1bmN0aW9uIEdldC1Qcm9qZWN0TWV0YWRhdGEgewogIDwjCiAgICAuU1lOT1BTSVMKICAg
IEdldCBtZXRhZGF0YSBmb3IgYSBDaGVmIFNvZnR3YXJlLCBJbmMuIHByb2plY3QKICAgIC5ERVND
UklQVElPTgogICAgR2V0IG1ldGFkYXRhIGZvciBwcm9qZWN0CiAgICAuRVhBTVBMRQogICAgaWV4
IChuZXctb2JqZWN0IG5ldC53ZWJjbGllbnQpLmRvd25sb2Fkc3RyaW5nKCdodHRwczovL29tbml0
cnVjay5jaGVmLmlvL2luc3RhbGwucHMxJyk7IEdldC1Qcm9qZWN0TWV0YWRhdGEgLXByb2plY3Qg
Y2hlZiAtY2hhbm5lbCBzdGFibGUKCiAgICBHZXRzIHRoZSBkb3dubG9hZCB1cmwgYW5kIFNIQTI1
NiBjaGVja3N1bSBmb3IgdGhlIGxhdGVzdCBzdGFibGUgcmVsZWFzZSBvZiBDaGVmLgogICAgLkVY
QU1QTEUKICAgIGlleCAoaXJtICdodHRwczovL29tbml0cnVjay5jaGVmLmlvL2luc3RhbGwucHMx
Jyk7IEdldC1Qcm9qZWN0TWV0YWRhdGEgLXByb2plY3QgY2hlZmRrIC1jaGFubmVsIHN0YWJsZSAt
dmVyc2lvbiAwLjguMAoKICAgIEdldHMgdGhlIGRvd25sb2FkIHVybCBhbmQgU0hBMjU2IGNoZWNr
c3VtIGZvciBDaGVmREsgMC44LjAuCiAgIz4KICBbY21kbGV0YmluZGluZygpXQogIHBhcmFtICgK
ICAgICMgQmFzZSB1cmwgdG8gcmV0cmlldmUgbWV0YWRhdGEgZnJvbS4KICAgIFt1cmldJGJhc2Vf
c2VydmVyX3VyaSA9ICdodHRwczovL29tbml0cnVjay5jaGVmLmlvJywKICAgIFtzdHJpbmddCiAg
ICAjIFByb2plY3QgdG8gaW5zdGFsbAogICAgW3N0cmluZ10KICAgICRwcm9qZWN0ID0gJ2NoZWYn
LAogICAgIyBWZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBpbnN0YWxsCiAgICAjIFRoaXMg
cGFyYW1ldGVyIGlzIG9wdGlvbmFsLCBpZiBub3Qgc3VwcGxpZWQgaXQgd2lsbCBwcm92aWRlIHRo
ZSBsYXRlc3QgdmVyc2lvbiwKICAgICMgYW5kIGlmIGFuIGl0ZXJhdGlvbiBudW1iZXIgaXMgbm90
IHNwZWNpZmllZCwgaXQgd2lsbCBncmFiIHRoZSBsYXRlc3QgYXZhaWxhYmxlIGl0ZXJhdGlvbi4K
ICAgICMgUGFydGlhbCB2ZXJzaW9uIG51bWJlcnMgYXJlIGFsc28gYWNjZXB0YWJsZSAodXNpbmcg
dj0xMQogICAgIyB3aWxsIGdyYWIgdGhlIGxhdGVzdCAxMS54IGNsaWVudCB3aGljaCBtYXRjaGVz
IHRoZSBvdGhlciBmbGFncykuCiAgICBbc3RyaW5nXQogICAgJHZlcnNpb24sCiAgICAjIFJlbGVh
c2UgY2hhbm5lbCB0byBpbnN0YWxsIGZyb20KICAgIFt2YWxpZGF0ZXNldCgnY3VycmVudCcsICdz
dGFibGUnLCAndW5zdGFibGUnKV0KICAgIFtzdHJpbmddCiAgICAkY2hhbm5lbCA9ICdzdGFibGUn
LAogICAgIyBUaGUgZm9sbG93aW5nIGxlZ2FjeSBzd2l0Y2hlcyBhcmUganVzdCBhbGlhc2VzIGZv
ciB0aGUgY3VycmVudCBjaGFubmVsCiAgICBbc3dpdGNoXQogICAgJHByZXJlbGVhc2UsCiAgICBb
c3dpdGNoXQogICAgJG5pZ2h0bGllcywKICAgIFt2YWxpZGF0ZXNldCgnYXV0bycsICdpMzg2Jywg
J3g4Nl82NCcpXQogICAgW3N0cmluZ10KICAgICRhcmNoaXRlY3R1cmUgPSAnYXV0bycKICApCgog
ICMgVGhlIGZvbGxvd2luZyBsZWdhY3kgc3dpdGNoZXMgYXJlIGp1c3QgYWxpYXNlcyBmb3IgdGhl
IGN1cnJlbnQgY2hhbm5lbAogIGlmICgoJHByZXJlbGVhc2UgLWVxICR0cnVlKSkgeyAkY2hhbm5l
bCA9ICdjdXJyZW50J30KICBpZiAoKCRuaWdodGxpZXMgLWVxICR0cnVlKSkgeyAkY2hhbm5lbCA9
ICdjdXJyZW50J30KCiAgIyBQb3dlclNoZWxsIGlzIG9ubHkgb24gV2luZG93cyBBVE0KICAkcGxh
dGZvcm0gPSAnd2luZG93cycKICBXcml0ZS1WZXJib3NlICJQbGF0Zm9ybTogJHBsYXRmb3JtIgoK
ICAkcGxhdGZvcm1fdmVyc2lvbiA9IEdldC1QbGF0Zm9ybVZlcnNpb24KICBXcml0ZS1WZXJib3Nl
ICJQbGF0Zm9ybSBWZXJzaW9uOiAkcGxhdGZvcm1fdmVyc2lvbiIKCiAgaWYgKCRhcmNoaXRlY3R1
cmUgLWVxICdhdXRvJykgewogICAgJGFyY2hpdGVjdHVyZSA9IEdldC1QbGF0Zm9ybUFyY2hpdGVj
dHVyZQogIH0KCiAgV3JpdGUtVmVyYm9zZSAiQXJjaGl0ZWN0dXJlOiAkYXJjaGl0ZWN0dXJlIgog
IFdyaXRlLVZlcmJvc2UgIlByb2plY3Q6ICRwcm9qZWN0IgoKICAkbWV0YWRhdGFfYmFzZV91cmwg
PSAiLyQoJGNoYW5uZWwpLyQoJHByb2plY3QpL21ldGFkYXRhIgogICRtZXRhZGF0YV9hcnJheSA9
ICgiP3Y9JCgkdmVyc2lvbikiLAogICAgInA9JHBsYXRmb3JtIiwKICAgICJwdj0kcGxhdGZvcm1f
dmVyc2lvbiIsCiAgICAibT0kYXJjaGl0ZWN0dXJlIikKICAkbWV0YWRhdGFfYmFzZV91cmwgKz0g
W3N0cmluZ106OmpvaW4oJyYnLCAkbWV0YWRhdGFfYXJyYXkpCiAgJG1ldGFkYXRhX3VybCA9IG5l
dy11cmkgJGJhc2Vfc2VydmVyX3VyaSAkbWV0YWRhdGFfYmFzZV91cmwKCiAgV3JpdGUtVmVyYm9z
ZSAiRG93bmxvYWRpbmcgJHByb2plY3QgZGV0YWlscyBmcm9tICRtZXRhZGF0YV91cmwiCiAgJHBh
Y2thZ2VfbWV0YWRhdGEgPSAoR2V0LVdlYkNvbnRlbnQgJG1ldGFkYXRhX3VybCkudHJpbSgpIC1z
cGxpdCAnXG4nIHwKICAgIGZvcmVhY2ggeyAkaGFzaCA9IEB7fSB9IHska2V5LCAkdmFsdWUgPSAk
XyAtc3BsaXQgJ1xzKyc7ICRoYXNoLkFkZCgka2V5LCAkdmFsdWUpfSB7JGhhc2h9CgogIFdyaXRl
LVZlcmJvc2UgIlByb2plY3QgZGV0YWlsczogIgogIGZvcmVhY2ggKCRrZXkgaW4gJHBhY2thZ2Vf
bWV0YWRhdGEua2V5cykgewogICAgV3JpdGUtVmVyYm9zZSAiYHQka2V5ID0gJCgkcGFja2FnZV9t
ZXRhZGF0YVska2V5XSkiCiAgfQogICRwYWNrYWdlX21ldGFkYXRhCn0KCmZ1bmN0aW9uIEluc3Rh
bGwtUHJvamVjdCB7CiAgPCMKICAgIC5TWU5PUFNJUwogICAgSW5zdGFsbCBhIENoZWYgU29mdHdh
cmUsIEluYy4gcHJvZHVjdAogICAgLkRFU0NSSVBUSU9OCiAgICBJbnN0YWxsIGEgQ2hlZiBTb2Z0
d2FyZSwgSW5jLiBwcm9kdWN0CiAgICAuRVhBTVBMRQogICAgaWV4IChuZXctb2JqZWN0IG5ldC53
ZWJjbGllbnQpLmRvd25sb2Fkc3RyaW5nKCdodHRwczovL29tbml0cnVjay5jaGVmLmlvL2luc3Rh
bGwucHMxJyk7IEluc3RhbGwtUHJvamVjdCAtcHJvamVjdCBjaGVmIC1jaGFubmVsIHN0YWJsZQoK
ICAgIEluc3RhbGxzIHRoZSBsYXRlc3Qgc3RhYmxlIHZlcnNpb24gb2YgQ2hlZi4KICAgIC5FWEFN
UExFCiAgICBpZXggKGlybSAnaHR0cHM6Ly9vbW5pdHJ1Y2suY2hlZi5pby9pbnN0YWxsLnBzMScp
OyBJbnN0YWxsLVByb2plY3QgLXByb2plY3QgY2hlZmRrIC1jaGFubmVsIGN1cnJlbnQKCiAgICBJ
bnN0YWxscyB0aGUgbGF0ZXN0IGludGVncmF0aW9uIGJ1aWxkIG9mIHRoZSBDaGVmIERldmVsb3Bt
ZW50IEtpdAogICM+CiAgW2NtZGxldGJpbmRpbmcoU3VwcG9ydHNTaG91bGRQcm9jZXNzPSR0cnVl
KV0KICBwYXJhbSAoCiAgICAjIFByb2plY3QgdG8gaW5zdGFsbAogICAgW3N0cmluZ10KICAgICRw
cm9qZWN0ID0gJ2NoZWYnLAogICAgIyBSZWxlYXNlIGNoYW5uZWwgdG8gaW5zdGFsbCBmcm9tCiAg
ICBbdmFsaWRhdGVzZXQoJ2N1cnJlbnQnLCAnc3RhYmxlJywgJ3Vuc3RhYmxlJyldCiAgICBbc3Ry
aW5nXQogICAgJGNoYW5uZWwgPSAnc3RhYmxlJywKICAgICMgVmVyc2lvbiBvZiB0aGUgYXBwbGlj
YXRpb24gdG8gaW5zdGFsbAogICAgIyBUaGlzIHBhcmFtZXRlciBpcyBvcHRpb25hbCwgaWYgbm90
IHN1cHBsaWVkIGl0IHdpbGwgcHJvdmlkZSB0aGUgbGF0ZXN0IHZlcnNpb24sCiAgICAjIGFuZCBp
ZiBhbiBpdGVyYXRpb24gbnVtYmVyIGlzIG5vdCBzcGVjaWZpZWQsIGl0IHdpbGwgZ3JhYiB0aGUg
bGF0ZXN0IGF2YWlsYWJsZSBpdGVyYXRpb24uCiAgICAjIFBhcnRpYWwgdmVyc2lvbiBudW1iZXJz
IGFyZSBhbHNvIGFjY2VwdGFibGUgKHVzaW5nIHY9MTEKICAgICMgd2lsbCBncmFiIHRoZSBsYXRl
c3QgMTEueCBjbGllbnQgd2hpY2ggbWF0Y2hlcyB0aGUgb3RoZXIgZmxhZ3MpLgogICAgW3N0cmlu
Z10KICAgICR2ZXJzaW9uLAogICAgIyBGdWxsIHBhdGggZm9yIHRoZSBkb3dubG9hZGVkIGluc3Rh
bGxlci4KICAgIFtzdHJpbmddCiAgICAkZmlsZW5hbWUsCiAgICAjIEZ1bGwgcGF0aCB0byB0aGUg
bG9jYXRpb24gdG8gZG93bmxvYWQgdGhlIGluc3RhbGxlcgogICAgW3N0cmluZ10KICAgICRkb3du
bG9hZF9kaXJlY3RvcnkgPSAkZW52OnRlbXAsCiAgICAjIFRoZSBmb2xsb3dpbmcgbGVnYWN5IHN3
aXRjaGVzIGFyZSBqdXN0IGFsaWFzZXMgZm9yIHRoZSBjdXJyZW50IGNoYW5uZWwKICAgIFtzd2l0
Y2hdCiAgICAkcHJlcmVsZWFzZSwKICAgIFtzd2l0Y2hdCiAgICAkbmlnaHRsaWVzLAogICAgW3Zh
bGlkYXRlc2V0KCdhdXRvJywgJ2kzODYnLCAneDg2XzY0JyldCiAgICBbc3RyaW5nXQogICAgJGFy
Y2hpdGVjdHVyZSA9ICdhdXRvJywKICAgIFt2YWxpZGF0ZXNldCgnYXV0bycsICdzZXJ2aWNlJywg
J3Rhc2snKV0KICAgIFtzdHJpbmddCiAgICAkZGFlbW9uID0gJ2F1dG8nLAogICAgW3N0cmluZ10K
ICAgICRodHRwX3Byb3h5LAogICAgIyBTcGVjaWZ5IGFuIGFsdGVybmF0ZSBkb3dubG9hZCB1cmwK
ICAgIFtzdHJpbmddCiAgICAkZG93bmxvYWRfdXJsX292ZXJyaWRlLAogICAgIyBTSEEyNTYgY2hl
Y2tzdW0gdG8gdmVyaWZ5IGNhY2hlZCBmaWxlcyAob3B0aW9uYWwpCiAgICBbc3RyaW5nXQogICAg
JGNoZWNrc3VtLAogICAgIyBTZXQgdG8gJ29uY2UnIHRvIHNraXAgaW5zdGFsbCBpZiBwcm9qZWN0
IGlzIGRldGVjdGVkCiAgICBbc3RyaW5nXQogICAgJGluc3RhbGxfc3RyYXRlZ3kKICApCgogIGlm
ICgoVGVzdC1QYXRoICIkZW52OnN5c3RlbWRyaXZlXG9wc2NvZGVcJHByb2plY3RcZW1iZWRkZWQi
KSAtYW5kICgkaW5zdGFsbF9zdHJhdGVneSAtZXEgJ29uY2UnKSkgewogICAgV3JpdGUtSG9zdCAi
JHByb2plY3QgaW5zdGFsbGF0aW9uIGRldGVjdGVkIgogICAgV3JpdGUtSG9zdCAiaW5zdGFsbF9z
dHJhdGVneSBzZXQgdG8gJ29uY2UnIgogICAgV3JpdGUtSG9zdCAiTm90aGluZyB0byBpbnN0YWxs
IgogICAgZXhpdAogIH0KCiAgIyBTZXQgaHR0cF9wcm94eSBhcyBlbnYgdmFyCiAgaWYoLW5vdCBb
c3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkaHR0cF9wcm94eSkpIHsKICAgICRlbnY6aHR0cF9wcm94
eSA9ICRodHRwX3Byb3h5CiAgfQoKICAkY2FjaGVkX2luc3RhbGxlcl9hdmFpbGFibGUgPSAkZmFs
c2UKICAkdmVyaWZ5X2NoZWNrc3VtID0gJHRydWUKICAKICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNO
dWxsT3JFbXB0eSgkZG93bmxvYWRfdXJsX292ZXJyaWRlKSkgewogICAgJGRvd25sb2FkX3VybCA9
ICRkb3dubG9hZF91cmxfb3ZlcnJpZGUKICAgICRzaGEyNTYgPSAkY2hlY2tzdW0KICB9IGVsc2Ug
ewogICAgJHBhY2thZ2VfbWV0YWRhdGEgPSBHZXQtUHJvamVjdE1ldGFkYXRhIC1wcm9qZWN0ICRw
cm9qZWN0IC1jaGFubmVsICRjaGFubmVsIC12ZXJzaW9uICR2ZXJzaW9uIC1wcmVyZWxlYXNlOiRw
cmVyZWxlYXNlIC1uaWdodGxpZXM6JG5pZ2h0bGllcyAtYXJjaGl0ZWN0dXJlICRhcmNoaXRlY3R1
cmUKICAgICRkb3dubG9hZF91cmwgPSAkcGFja2FnZV9tZXRhZGF0YS51cmwKICAgICRzaGEyNTYg
PSAkcGFja2FnZV9tZXRhZGF0YS5zaGEyNTYKICB9CgogIGlmICgtbm90IFtzdHJpbmddOjpJc051
bGxPckVtcHR5KCRmaWxlbmFtZSkpIHsKICAgICRkb3dubG9hZF9kaXJlY3RvcnkgPSBzcGxpdC1w
YXRoICRmaWxlbmFtZQogICAgJGZpbGVuYW1lID0gc3BsaXQtcGF0aCAkZmlsZW5hbWUgLWxlYWYK
ICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkZG93bmxvYWRfZGlyZWN0b3J5KSkgewog
ICAgICAkZG93bmxvYWRfZGlyZWN0b3J5ID0gJHB3ZAogICAgfQogIH0KICBlbHNlIHsKICAgICRm
aWxlbmFtZSA9ICgkZG93bmxvYWRfdXJsIC1zcGxpdCAnLycpWy0xXQogIH0KICBXcml0ZS1WZXJi
b3NlICJEb3dubG9hZCBkaXJlY3Rvcnk6ICRkb3dubG9hZF9kaXJlY3RvcnkiCiAgV3JpdGUtVmVy
Ym9zZSAiRmlsZW5hbWU6ICRmaWxlbmFtZSIKCiAgaWYgKC1ub3QgKHRlc3QtcGF0aCAkZG93bmxv
YWRfZGlyZWN0b3J5KSkgewogICAgbWtkaXIgJGRvd25sb2FkX2RpcmVjdG9yeQogIH0KCiAgJGRv
d25sb2FkX2RpcmVjdG9yeSA9IChyZXNvbHZlLXBhdGggJGRvd25sb2FkX2RpcmVjdG9yeSkucHJv
dmlkZXJwYXRoCiAgJGRvd25sb2FkX2Rlc3RpbmF0aW9uID0gam9pbi1wYXRoICRkb3dubG9hZF9k
aXJlY3RvcnkgJGZpbGVuYW1lCgogIGlmICgodGVzdC1wYXRoICRkb3dubG9hZF9kZXN0aW5hdGlv
bikpIHsKICAgIFdyaXRlLVZlcmJvc2UgIkZvdW5kIGV4aXN0aW5nIGluc3RhbGxlciBhdCAkZG93
bmxvYWRfZGVzdGluYXRpb24uIgogICAgaWYgKC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHko
JHNoYTI1NikpIHsKICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tzdW0gc3BlY2lmaWVkIgogICAg
ICAkdmFsaWRfY2hlY2tzdW0gPSBUZXN0LVByb2plY3RQYWNrYWdlIC1QYXRoICRkb3dubG9hZF9k
ZXN0aW5hdGlvbiAtQWxnb3JpdGhtICdTSEEyNTYnIC1IYXNoICRzaGEyNTYKICAgICAgaWYgKCR2
YWxpZF9jaGVja3N1bSAtZXEgJHRydWUpIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJDaGVja3N1
bSB2ZXJpZmllZCwgdXNpbmcgZXhpc3RpbmcgaW5zdGFsbGVyLiIKICAgICAgICAkY2FjaGVkX2lu
c3RhbGxlcl9hdmFpbGFibGU9JHRydWUgIyBsb2NhbCBmaWxlIE9LCiAgICAgICAgJHZlcmlmeV9j
aGVja3N1bSA9ICRmYWxzZSAjIG5vIG5lZWQgdG8gcmUtdmVyaWZ5IGNoZWNrc3VtcwogICAgICB9
CiAgICAgIGVsc2UgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkNoZWNrc3VtIG1pc21hdGNoLCBp
Z25vcmluZyBleGlzdGluZyBpbnN0YWxsZXIuIgogICAgICAgICRjYWNoZWRfaW5zdGFsbGVyX2F2
YWlsYWJsZT0kZmFsc2UgIyBiYWQgbG9jYWwgZmlsZQogICAgICAgICR2ZXJpZnlfY2hlY2tzdW0g
PSAkZmFsc2UgIyByZS12ZXJpZnkgY2hlY2tzdW1zCiAgICAgIH0KICAgIH0KICAgIGVsc2Ugewog
ICAgICBXcml0ZS1WZXJib3NlICJDaGVja3N1bSBub3Qgc3BlY2lmaWVkLCBleGlzdGluZyBpbnN0
YWxsZXIgaWdub3JlZC4iCiAgICAgICRjYWNoZWRfaW5zdGFsbGVyX2F2YWlsYWJsZT0kZmFsc2Ug
IyBpZ25vcmUgbG9jYWwgZmlsZQogICAgICAkdmVyaWZ5X2NoZWNrc3VtID0gJGZhbHNlICMgbm8g
Y2hlY2tzdW0gdG8gY29tcGFyZQogICAgfQogIH0KCiAgaWYgKC1ub3QgKCRjYWNoZWRfaW5zdGFs
bGVyX2F2YWlsYWJsZSkpIHsKICAgIGlmICgkcHNjbWRsZXQuU2hvdWxkUHJvY2VzcygiJCgkZG93
bmxvYWRfdXJsKSIsICJEb3dubG9hZCAkcHJvamVjdCIpKSB7CiAgICAgIFdyaXRlLVZlcmJvc2Ug
IkRvd25sb2FkaW5nICRwcm9qZWN0IGZyb20gJCgkZG93bmxvYWRfdXJsKSB0byAkZG93bmxvYWRf
ZGVzdGluYXRpb24uIgogICAgICBHZXQtV2ViQ29udGVudCAkZG93bmxvYWRfdXJsIC1maWxlcGF0
aCAkZG93bmxvYWRfZGVzdGluYXRpb24KICAgIH0KICB9CgogIGlmICgkcHNjbWRsZXQuU2hvdWxk
UHJvY2VzcygiJGRvd25sb2FkX2Rlc3RpbmF0aW9uIiwgIkluc3RhbGxpbmciKSkgewogICAgaWYg
KCgkdmVyaWZ5X2NoZWNrc3VtKSAtYW5kICgtbm90IChUZXN0LVByb2plY3RQYWNrYWdlIC1QYXRo
ICRkb3dubG9hZF9kZXN0aW5hdGlvbiAtQWxnb3JpdGhtICdTSEEyNTYnIC1IYXNoICRzaGEyNTYp
KSkgewogICAgICB0aHJvdyAiRmFpbGVkIHRvIHZhbGlkYXRlIHRoZSBkb3dubG9hZGVkIGluc3Rh
bGxlciBmb3IgJHByb2plY3QuIgogICAgfQoKICAgIFdyaXRlLUhvc3QgIkluc3RhbGxpbmcgJHBy
b2plY3QgZnJvbSAkZG93bmxvYWRfZGVzdGluYXRpb24iCiAgICAkaW5zdGFsbGluZ1Byb2plY3Qg
PSAkVHJ1ZQogICAgJGluc3RhbGxBdHRlbXB0cyA9IDAKICAgIHdoaWxlICgkaW5zdGFsbGluZ1By
b2plY3QpIHsKICAgICAgJGluc3RhbGxBdHRlbXB0cysrCiAgICAgICRyZXN1bHQgPSAkZmFsc2UK
ICAgICAgaWYoJGRvd25sb2FkX2Rlc3RpbmF0aW9uLkVuZHNXaXRoKCIuYXBweCIpKSB7CiAgICAg
ICAgJHJlc3VsdCA9IEluc3RhbGwtQ2hlZkFwcHggJGRvd25sb2FkX2Rlc3RpbmF0aW9uICRwcm9q
ZWN0CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgJHJlc3VsdCA9IEluc3RhbGwtQ2hlZk1z
aSAkZG93bmxvYWRfZGVzdGluYXRpb24gJGRhZW1vbgogICAgICB9CiAgICAgIGlmKCEkcmVzdWx0
KSB7IGNvbnRpbnVlIH0KICAgICAgJGluc3RhbGxpbmdQcm9qZWN0ID0gJEZhbHNlCiAgICB9CiAg
fQp9CnNldC1hbGlhcyBpbnN0YWxsIC12YWx1ZSBJbnN0YWxsLVByb2plY3QKCkZ1bmN0aW9uIElu
c3RhbGwtQ2hlZk1zaSgkbXNpLCAkYWRkbG9jYWwpIHsKICBpZiAoJGFkZGxvY2FsIC1lcSAic2Vy
dmljZSIpIHsKICAgICRwID0gU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIm1zaWV4ZWMuZXhlIiAt
QXJndW1lbnRMaXN0ICIvcW4gL2kgJG1zaSBBRERMT0NBTD1gIkNoZWZDbGllbnRGZWF0dXJlLENo
ZWZTZXJ2aWNlRmVhdHVyZWAiIiAtUGFzc3RocnUgLVdhaXQgLU5vTmV3V2luZG93CiAgfQogIEVs
c2VJZiAoJGFkZGxvY2FsIC1lcSAidGFzayIpIHsKICAgICRwID0gU3RhcnQtUHJvY2VzcyAtRmls
ZVBhdGggIm1zaWV4ZWMuZXhlIiAtQXJndW1lbnRMaXN0ICIvcW4gL2kgJG1zaSBBRERMT0NBTD1g
IkNoZWZDbGllbnRGZWF0dXJlLENoZWZTY2hUYXNrRmVhdHVyZWAiIiAtUGFzc3RocnUgLVdhaXQg
LU5vTmV3V2luZG93CiAgfQogIEVsc2VJZiAoJGFkZGxvY2FsIC1lcSAiYXV0byIpIHsKICAgICRw
ID0gU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggIm1zaWV4ZWMuZXhlIiAtQXJndW1lbnRMaXN0ICIv
cW4gL2kgJG1zaSIgLVBhc3N0aHJ1IC1XYWl0IC1Ob05ld1dpbmRvdwogIH0KCiAgJHAuV2FpdEZv
ckV4aXQoKQogIGlmICgkcC5FeGl0Q29kZSAtZXEgMTYxOCkgewogICAgV3JpdGUtSG9zdCAiJCgo
R2V0LURhdGUpLlRvU3RyaW5nKCkpIC0gQW5vdGhlciBtc2kgaW5zdGFsbCBpcyBpbiBwcm9ncmVz
cyAoZXhpdCBjb2RlIDE2MTgpLCByZXRyeWluZyAoJCgkaW5zdGFsbEF0dGVtcHRzKSkuLi4iCiAg
ICByZXR1cm4gJGZhbHNlCiAgfSBlbHNlaWYgKCRwLkV4aXRDb2RlIC1uZSAwKSB7CiAgICB0aHJv
dyAibXNpZXhlYyB3YXMgbm90IHN1Y2Nlc3NmdWwuIFJlY2VpdmVkIGV4aXQgY29kZSAkKCRwLkV4
aXRDb2RlKSIKICB9CiAgcmV0dXJuICR0cnVlCn0KCkZ1bmN0aW9uIEluc3RhbGwtQ2hlZkFwcHgo
JGFwcHgsICRwcm9qZWN0KSB7CiAgQWRkLUFwcHhQYWNrYWdlIC1QYXRoICRhcHB4IC1FcnJvckFj
dGlvbiBTdG9wCiAgJHBhY2thZ2UgPSAoR2V0LUFwcHhQYWNrYWdlIC1OYW1lICRwcm9qZWN0KS5J
bnN0YWxsTG9jYXRpb24KICAkaW5zdGFsbFJvb3QgPSAiJGVudjpTeXN0ZW1Ecml2ZS9vcHNjb2Rl
IgogICRvbW5pYnVzUm9vdCA9IEpvaW4tUGF0aCAkaW5zdGFsbFJvb3QgJHByb2plY3QKCiAgaWYo
IShUZXN0LVBhdGggJGluc3RhbGxSb290KSkgewogICAgTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVj
dG9yeSAtUGF0aCAkaW5zdGFsbFJvb3QKICB9CgogICMgUmVtb3ZlIG9sZCB2ZXJzaW9uIG9mIGNo
ZWYgaWYgaXQgaXMgaGVyZQogIGlmKFRlc3QtUGF0aCAkb21uaWJ1c1Jvb3QpIHsKICAgIFJlbW92
ZS1JdGVtIC1QYXRoICRvbW5pYnVzUm9vdCAtUmVjdXJzZSAtRm9yY2UKICB9CgogICMgY29weSB0
aGUgYXBweCBpbnN0YWxsIHRvIHRoZSBvbW5pYnVzIHJvb3QuIFRoZXJlIGFyZSBzZXJpb3VzCiAg
IyBBQ0wgcmVsYXRlZCBpc3N1ZXMgd2l0aCBydW5uaW5nIGNoZWYgZnJvbSB0aGUgYXBweCBJbnN0
YWxsTG9jYXRpb24KICAjIEhvcGluZyB0aGlzIGlzIHRlbXBvcmFyeSBhbmQgd2UgY2FuIGV2ZW50
dWFsbHkganVzdCBzeW1saW5rCiAgQ29weS1JdGVtICRwYWNrYWdlICRvbW5pYnVzUm9vdCAtUmVj
dXJzZQoKICByZXR1cm4gJHRydWUKfQoKZXhwb3J0LW1vZHVsZW1lbWJlciAtZnVuY3Rpb24gJ0lu
c3RhbGwtUHJvamVjdCcsJ0dldC1Qcm9qZWN0TWV0YWRhdGEnIC1hbGlhcyAnaW5zdGFsbCcKCn0=`;

  private WindowsHabitatInstallSHA265 = "0E0F56DC1F3193B10CB8E4BDD9452AC9660E23983423F74700FFC26AB2CB9F0A";
  private WindowsHabitatInstall = `PCMNCi5TWU5PUFNJUw0KSW5zdGFsbHMgdGhlIEhhYml0YXQgJ2hhYicgcHJvZ3JhbS4NCg0KQXV0
  aG9yczogVGhlIEhhYml0YXQgTWFpbnRhaW5lcnMgPGh1bWFuc0BoYWJpdGF0LnNoPg0KDQouREVT
  Q1JJUFRJT04NClRoaXMgc2NyaXB0IGJ1aWxkcyBoYWJpdGF0IGNvbXBvbmVudHMgYW5kIGVuc3Vy
  ZXMgdGhhdCBhbGwgbmVjZXNhcnkgcHJlcmVxdWlzaXRlcyBhcmUgaW5zdGFsbGVkLg0KDQouUGFy
  YW1ldGVyIENoYW5uZWwNClNwZWNpZmllcyBhIGNoYW5uZWwNCg0KLlBhcmFtZXRlciBWZXJzaW9u
  DQpTcGVjaWZpZXMgYSB2ZXJzaW9uIChleDogMC43NS4wLCAwLjc1LjAvMjAxOTAyMTkyMzIyMDgp
  DQojPg0KDQpwYXJhbSAoDQogICAgW0FsaWFzKCJjIildDQogICAgW3N0cmluZ10kQ2hhbm5lbD0i
  c3RhYmxlIiwNCiAgICBbQWxpYXMoInYiKV0NCiAgICBbc3RyaW5nXSRWZXJzaW9uDQopDQoNCiRF
  cnJvckFjdGlvblByZWZlcmVuY2U9InN0b3AiDQoNClNldC1WYXJpYWJsZSBwYWNrYWdlc0NoZWZp
  b1Jvb3RVcmwgLU9wdGlvbiBSZWFkT25seSAtdmFsdWUgImh0dHBzOi8vcGFja2FnZXMuY2hlZi5p
  by9maWxlcyINCg0KRnVuY3Rpb24gR2V0LUZpbGUoJHVybCwgJGRzdCkgew0KICAgIFdyaXRlLUhv
  c3QgIkRvd25sb2FkaW5nICR1cmwiDQogICAgIyBDYW4ndCB1c2UgW1N5c3RlbS5OZXQuU2VjdXJp
  dHlQcm90b2NvbFR5cGVdOjpUbHMxMiBvbiBvbGRlciAuTkVUIHZlcnNpb25zDQogICAgIyBOZWVk
  IHRvIHVzZSAzMDcyLiBVbiBwYXRjaGVkIG9sZGVyIHZlcnNpb25zIG9mIHdpbmRvd3Mgd2lsbCBm
  YWlsIGV2ZW4gb24gMzA3Mg0KICAgIHRyeSB7DQogICAgICAgIFtTeXN0ZW0uTmV0LlNlcnZpY2VQ
  b2ludE1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW0VudW1dOjpUb09iamVjdChbU3lzdGVt
  Lk5ldC5TZWN1cml0eVByb3RvY29sVHlwZV0sIDMwNzIpDQogICAgfSBjYXRjaCB7DQogICAgICAg
  IFdyaXRlLUVycm9yICJUTFMgMS4yIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBvcGVyYXRpbmcg
  c3lzdGVtLiBVcGdyYWRlIG9yIHBhdGNoIHlvdXIgV2luZG93cyBpbnN0YWxsYXRpb24uIg0KICAg
  IH0NCiAgICAkd2MgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50DQogICAgJHdjLkRv
  d25sb2FkRmlsZSgkdXJsLCAkZHN0KQ0KfQ0KDQpGdW5jdGlvbiBHZXQtV29ya0RpciB7DQogICAg
  JHBhcmVudCA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldFRlbXBQYXRoKCkNCiAgICBbc3RyaW5nXSAk
  bmFtZSA9IFtTeXN0ZW0uR3VpZF06Ok5ld0d1aWQoKQ0KICAgIE5ldy1JdGVtIC1JdGVtVHlwZSBE
  aXJlY3RvcnkgLVBhdGggKEpvaW4tUGF0aCAkcGFyZW50ICRuYW1lKQ0KfQ0KDQojIERvd25sb2Fk
  cyB0aGUgcmVxdWVzdGVkIGFyY2hpdmUgZnJvbSBwYWNrYWdlcy5jaGVmLmlvDQpGdW5jdGlvbiBH
  ZXQtQXJjaGl2ZSgkY2hhbm5lbCwgJHZlcnNpb24pIHsNCiAgICAkdXJsID0gJHBhY2thZ2VzQ2hl
  ZmlvUm9vdFVybA0KICAgIGlmKCEkdmVyc2lvbiAtT3IgJHZlcnNpb24gLWVxICJsYXRlc3QiKSB7
  DQogICAgICAgICRoYWJfdXJsPSIkdXJsLyRjaGFubmVsL2hhYml0YXQvbGF0ZXN0L2hhYi14ODZf
  NjQtd2luZG93cy56aXAiDQogICAgfSBlbHNlIHsNCiAgICAgICAgJHZlcnNpb24sJF9yZWxlYXNl
  ID0gJHZlcnNpb24gLXNwbGl0ICIvIiwyLCJTaW1wbGVNYXRjaCINCiAgICAgICAgaWYoJG51bGwg
  LW5lICRfcmVsZWFzZSkgew0KICAgICAgICAgICAgV3JpdGUtV2FybmluZyAicGFja2FnZXMuY2hl
  Zi5pbyBkb2VzIG5vdCBzdXBwb3J0ICd2ZXJzaW9uL3JlbGVhc2UnIGZvcm1hdC4gVXNpbmcgJHZl
  cnNpb24gZm9yIHRoZSB2ZXJzaW9uIg0KICAgICAgICB9DQoNCiAgICAgICAgJGhhYl91cmw9IiR1
  cmwvaGFiaXRhdC8ke3ZlcnNpb259L2hhYi14ODZfNjQtd2luZG93cy56aXAiDQogICAgfQ0KICAg
  ICRzaGFfdXJsPSIkaGFiX3VybC5zaGEyNTZzdW0iDQogICAgJGhhYl9kZXN0ID0gKEpvaW4tUGF0
  aCAoJHdvcmtkaXIpICJoYWIuemlwIikNCiAgICAkc2hhX2Rlc3QgPSAoSm9pbi1QYXRoICgkd29y
  a2RpcikgImhhYi56aXAuc2hhc3VtMjU2IikNCg0KICAgIEdldC1GaWxlICRoYWJfdXJsICRoYWJf
  ZGVzdA0KICAgICRyZXN1bHQgPSBAeyAiemlwIiA9ICRoYWJfZGVzdCB9DQoNCiAgICAjIE5vdGUg
  dGhhdCB0aGlzIHdpbGwgZmFpbCBvbiB2ZXJzaW9ucyBsZXNzIHRoYW4gMC43MS4wDQogICAgIyB3
  aGVuIHdlIGRpZCBub3QgdXBsb2FkIHNoYXN1bSBmaWxlcyB0byBiaW50cmF5Lg0KICAgICMgTk9U
  RTogVGhpcyBpcyBsZWZ0IGluIHBsYWNlIGJlY2F1c2UsIHdoaWxlIHdlIGRvbid0IHNoaXAgPDAu
  NzEuMA0KICAgICMgZnJvbSBzMyB0b2RheSwgdGhlIGludGVudCBpcyB0byBtb3ZlIG9sZCByZWxl
  YXNlcyBvdmVyDQogICAgdHJ5IHsNCiAgICAgICAgR2V0LUZpbGUgJHNoYV91cmwgJHNoYV9kZXN0
  DQogICAgICAgICRyZXN1bHRbInNoYXN1bSJdID0gKEdldC1Db250ZW50ICRzaGFfZGVzdCkuU3Bs
  aXQoKVswXQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1XYXJuaW5nICJObyBzaGFzdW0g
  ZXhpc3RzIGZvciAkdmVyc2lvbi4gU2tpcHBpbmcgdmFsaWRhdGlvbi4iDQogICAgfQ0KICAgICRy
  ZXN1bHQNCn0NCg0KZnVuY3Rpb24gR2V0LVNIQTI1NkNvbnZlcnRlciB7DQogICAgaWYoJFBTVmVy
  c2lvblRhYmxlLlBTRWRpdGlvbiAtZXEgJ0NvcmUnKSB7DQogICAgICAgIFtTeXN0ZW0uU2VjdXJp
  dHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nl06OkNyZWF0ZSgpDQogICAgfSBlbHNlIHsNCiAgICAgICAg
  TmV3LU9iamVjdCAtVHlwZU5hbWUgU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nk1hbmFnZWQN
  CiAgICB9DQp9DQoNCkZ1bmN0aW9uIEdldC1TaGEyNTYoJHNyYykgew0KICAgICRjb252ZXJ0ZXIg
  PSBHZXQtU0hBMjU2Q29udmVydGVyDQogICAgdHJ5IHsNCiAgICAgICAgJGJ5dGVzID0gJGNvbnZl
  cnRlci5Db21wdXRlSGFzaCgoJGluID0gKEdldC1JdGVtICRzcmMpLk9wZW5SZWFkKCkpKQ0KICAg
  ICAgICByZXR1cm4gKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJGJ5dGVzKSkuUmVw
  bGFjZSgiLSIsICIiKS5Ub0xvd2VyKCkNCiAgICB9IGZpbmFsbHkgew0KICAgICAgICAjIE9sZGVy
  IC5OZXQgdmVyc2lvbnMgZG8gbm90IGV4cG9zZSBEaXNwb3NlKCkNCiAgICAgICAgaWYoJFBTVmVy
  c2lvblRhYmxlLlBTRWRpdGlvbiAtZXEgJ0NvcmUnIC1PciAoJFBTVmVyc2lvblRhYmxlLkNMUlZl
  cnNpb24uTWFqb3IgLWdlIDQpKSB7DQogICAgICAgICAgICAkY29udmVydGVyLkRpc3Bvc2UoKQ0K
  ICAgICAgICB9DQogICAgICAgIGlmICgkbnVsbCAtbmUgJGluKSB7ICRpbi5EaXNwb3NlKCkgfQ0K
  ICAgIH0NCn0NCg0KRnVuY3Rpb24gQXNzZXJ0LVNoYXN1bSgkYXJjaGl2ZSkgew0KICAgIFdyaXRl
  LUhvc3QgIlZlcmlmeWluZyB0aGUgc2hhc3VtIGRpZ2VzdCBtYXRjaGVzIHRoZSBkb3dubG9hZGVk
  IGFyY2hpdmUiDQogICAgJGFjdHVhbFNoYXN1bSA9IEdldC1TaGEyNTYgJGFyY2hpdmUuemlwDQog
  ICAgaWYoJGFjdHVhbFNoYXN1bSAtbmUgJGFyY2hpdmUuc2hhc3VtKSB7DQogICAgICAgIFdyaXRl
  LUVycm9yICJDaGVja3N1bSAnJCgkYXJjaGl2ZS5zaGFzdW0pJyBpbnZhbGlkLiINCiAgICB9DQp9
  DQoNCkZ1bmN0aW9uIEluc3RhbGwtSGFiaXRhdCB7DQogICAgJGhhYlBhdGggPSBKb2luLVBhdGgg
  JGVudjpQcm9ncmFtRGF0YSBIYWJpdGF0DQogICAgaWYoVGVzdC1QYXRoICRoYWJQYXRoKSB7IFJl
  bW92ZS1JdGVtICRoYWJQYXRoIC1SZWN1cnNlIC1Gb3JjZSB9DQogICAgTmV3LUl0ZW0gJGhhYlBh
  dGggLUl0ZW1UeXBlIERpcmVjdG9yeSB8IE91dC1OdWxsDQogICAgJGZvbGRlciA9IChHZXQtQ2hp
  bGRJdGVtIChKb2luLVBhdGggKCR3b3JrZGlyKSAiaGFiLSoiKSkNCiAgICBDb3B5LUl0ZW0gIiQo
  JGZvbGRlci5GdWxsTmFtZSlcKiIgJGhhYlBhdGgNCiAgICAkZW52OlBBVEggPSBOZXctUGF0aFN0
  cmluZyAtU3RhcnRpbmdQYXRoICRlbnY6UEFUSCAtUGF0aCAkaGFiUGF0aA0KICAgICRtYWNoaW5l
  UGF0aCA9IFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpHZXRFbnZpcm9ubWVudFZhcmlhYmxlKCJQQVRI
  IiwgIk1hY2hpbmUiKQ0KICAgICRtYWNoaW5lUGF0aCA9IE5ldy1QYXRoU3RyaW5nIC1TdGFydGlu
  Z1BhdGggJG1hY2hpbmVQYXRoIC1QYXRoICRoYWJQYXRoDQogICAgW1N5c3RlbS5FbnZpcm9ubWVu
  dF06OlNldEVudmlyb25tZW50VmFyaWFibGUoIlBBVEgiLCAkbWFjaGluZVBhdGgsICJNYWNoaW5l
  IikNCiAgICAkZm9sZGVyLk5hbWUuUmVwbGFjZSgiaGFiLSIsIiIpDQp9DQoNCkZ1bmN0aW9uIE5l
  dy1QYXRoU3RyaW5nKFtzdHJpbmddJFN0YXJ0aW5nUGF0aCwgW3N0cmluZ10kUGF0aCkgew0KICAg
  IGlmICgtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRwYXRoKSkgew0KICAgICAgICBpZiAo
  LW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkU3RhcnRpbmdQYXRoKSkgew0KICAgICAgICAg
  ICAgW3N0cmluZ1tdXSRQYXRoQ29sbGVjdGlvbiA9ICIkcGF0aDskU3RhcnRpbmdQYXRoIiAtc3Bs
  aXQgJzsnDQogICAgICAgICAgICAkUGF0aCA9ICgkUGF0aENvbGxlY3Rpb24gfA0KICAgICAgICAg
  ICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1VbmlxdWUgfA0KICAgICAgICAgICAgICAgICAgICBX
  aGVyZS1PYmplY3Qgey1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJF8udHJpbSgpKX0gfA0K
  ICAgICAgICAgICAgICAgICAgICBXaGVyZS1PYmplY3Qge1Rlc3QtUGF0aCAiJF8ifQ0KICAgICAg
  ICAgICAgKSAtam9pbiAnOycNCiAgICAgICAgfQ0KICAgICAgICAkcGF0aA0KICAgIH0gZWxzZSB7
  DQogICAgICAgICRTdGFydGluZ1BhdGgNCiAgICB9DQp9DQoNCkZ1bmN0aW9uIEV4cGFuZC1aaXAo
  JHppcFBhdGgpIHsNCiAgICAkZGVzdCA9ICR3b3JrZGlyDQogICAgdHJ5IHsNCiAgICAgICAgIyBX
  b3JrcyBvbiAuTmV0IDQuNSBhbmQgdXAgKGFzIHdlbGwgYXMgLk5ldCBDb3JlKQ0KICAgICAgICAj
  IFllcyBvbiBQUyB2NSBhbmQgdXAgd2UgaGF2ZSBFeHBhbmQtQXJjaGl2ZSBidXQgdGhpcyB3b3Jr
  cyBvbiBQUyB2NCB0b28NCiAgICAgICAgW1N5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5XTo6TG9h
  ZFdpdGhQYXJ0aWFsTmFtZSgiU3lzdGVtLklPLkNvbXByZXNzaW9uLkZpbGVTeXN0ZW0iKSB8IE91
  dC1OdWxsDQogICAgICAgIFtTeXN0ZW0uSU8uQ29tcHJlc3Npb24uWmlwRmlsZV06OkV4dHJhY3RU
  b0RpcmVjdG9yeSgkemlwUGF0aCwgJGRlc3QpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRyeSB7
  DQogICAgICAgICAgICAjIFdvcmtzIG9uIGFsbCBHVUkgZW5hYmxlZCB2ZXJzaW9ucy4gV2lsbCBm
  YWlsDQogICAgICAgICAgICAjIE9uIFNlcnZlciBDb3JlIGVkaXRpb25zDQogICAgICAgICAgICAk
  c2hlbGxBcHBsaWNhdGlvbiA9IE5ldy1PYmplY3QgLWNvbSBzaGVsbC5hcHBsaWNhdGlvbg0KICAg
  ICAgICAgICAgJHppcFBhY2thZ2UgPSAkc2hlbGxBcHBsaWNhdGlvbi5OYW1lU3BhY2UoJHppcFBh
  dGgpDQogICAgICAgICAgICAkZGVzdGluYXRpb25Gb2xkZXIgPSAkc2hlbGxBcHBsaWNhdGlvbi5O
  YW1lU3BhY2UoJGRlc3QpDQogICAgICAgICAgICAkZGVzdGluYXRpb25Gb2xkZXIuQ29weUhlcmUo
  JHppcFBhY2thZ2UuSXRlbXMoKSkNCiAgICAgICAgfSBjYXRjaHsNCiAgICAgICAgICAgIFdyaXRl
  LUVycm9yICJVbmFibGUgdG8gdW56aXAgZmlsZXMgb24gdGhpcyBPUyINCiAgICAgICAgfQ0KICAg
  IH0NCn0NCg0KRnVuY3Rpb24gQXNzZXJ0LUhhYml0YXQoJGlkZW50KSB7DQogICAgV3JpdGUtSG9z
  dCAiQ2hlY2tpbmcgaW5zdGFsbGVkIGhhYiB2ZXJzaW9uICRpZGVudCINCiAgICAkb3JpZyA9ICRl
  bnY6SEFCX0xJQ0VOU0UNCiAgICAkZW52OkhBQl9MSUNFTlNFID0gImFjY2VwdC1uby1wZXJzaXN0
  Ig0KICAgIHRyeSB7DQogICAgICAgICRhY3R1YWwgPSBoYWIgLS12ZXJzaW9uDQogICAgICAgIGlm
  ICghJGFjdHVhbCAtb3IgKCJoYWIgJGlkZW50IiAtbmUgIiQoJGFjdHVhbC5SZXBsYWNlKCcvJywg
  Jy0nKSkteDg2XzY0LXdpbmRvd3MiKSkgew0KICAgICAgICAgICAgV3JpdGUtRXJyb3IgIlVuYWJs
  ZSB0byB2ZXJpZnkgSGFiaXRhdCB3YXMgc3VjY2VzZnVsbHkgaW5zdGFsbGVkIg0KICAgICAgICB9
  DQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgJGVudjpIQUJfTElDRU5TRSA9ICRvcmlnDQogICAg
  fQ0KfQ0KDQpXcml0ZS1Ib3N0ICJJbnN0YWxsaW5nIEhhYml0YXQgJ2hhYicgcHJvZ3JhbSINCg0K
  JHdvcmtkaXIgPSBHZXQtV29ya0Rpcg0KTmV3LUl0ZW0gJHdvcmtkaXIgLUl0ZW1UeXBlIERpcmVj
  dG9yeSAtRm9yY2UgfCBPdXQtTnVsbA0KdHJ5IHsNCiAgICAkYXJjaGl2ZSA9IEdldC1BcmNoaXZl
  ICRjaGFubmVsICR2ZXJzaW9uDQogICAgaWYoJGFyY2hpdmUuc2hhc3VtKSB7DQogICAgICAgIEFz
  c2VydC1TaGFzdW0gJGFyY2hpdmUNCiAgICB9DQogICAgRXhwYW5kLXppcCAkYXJjaGl2ZS56aXAN
  CiAgICAkZnVsbElkZW50ID0gSW5zdGFsbC1IYWJpdGF0DQogICAgQXNzZXJ0LUhhYml0YXQgJGZ1
  bGxJZGVudA0KDQogICAgV3JpdGUtSG9zdCAiSW5zdGFsbGF0aW9uIG9mIEhhYml0YXQgJ2hhYicg
  cHJvZ3JhbSBjb21wbGV0ZS4iDQp9IGZpbmFsbHkgew0KICAgIHRyeSB7IFJlbW92ZS1JdGVtICR3
  b3JrZGlyIC1SZWN1cnNlIC1Gb3JjZSB9IGNhdGNoIHsNCiAgICAgICAgV3JpdGUtV2FybmluZyAi
  VW5hYmxlIHRvIGRlbGV0ZSAkd29ya2RpciINCiAgICB9DQp9`;

  // Linux script
  private LinuxInstallSHA256 = "14BA6CAA8001F9190E3E89C279391FB4A42960A3AAF99931A1AFF3AC7E20C865";
  private LinuxInstall = `IyEvYmluL3NoCiMgV0FSTklORzogUkVRVUlSRVMgL2Jpbi9zaAojCiMgLSBtdXN0IHJ1biBvbiAv
YmluL3NoIG9uIHNvbGFyaXMgOQojIC0gbXVzdCBydW4gb24gL2Jpbi9zaCBvbiBBSVggNi54CiMK
IyBDb3B5cmlnaHQ6OiBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxOCBDaGVmIFNvZnR3YXJlLCBJbmMu
CiMgTGljZW5zZTo6IEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMAojCiMgTGljZW5zZWQgdW5k
ZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91
IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNl
bnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICAgIGh0
dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAojCiMgVW5sZXNzIHJlcXVp
cmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoj
IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJ
UyIgQkFTSVMsCiMgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQs
IGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiMgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3Bl
Y2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAojIGxpbWl0YXRpb25zIHVu
ZGVyIHRoZSBMaWNlbnNlLgojCgojIGhlbHBlcnMuc2gKIyMjIyMjIyMjIyMjCiMgVGhpcyBzZWN0
aW9uIGhhcyBzb21lIGhlbHBlciBmdW5jdGlvbnMgdG8gbWFrZSBsaWZlIGVhc2llci4KIwojIE91
dHB1dHM6CiMgJHRtcF9kaXI6IHNlY3VyZS1pc2ggdGVtcCBkaXJlY3RvcnkgdGhhdCBjYW4gYmUg
dXNlZCBkdXJpbmcgaW5zdGFsbGF0aW9uLgojIyMjIyMjIyMjIyMKCiMgQ2hlY2sgd2hldGhlciBh
IGNvbW1hbmQgZXhpc3RzIC0gcmV0dXJucyAwIGlmIGl0IGRvZXMsIDEgaWYgaXQgZG9lcyBub3QK
ZXhpc3RzKCkgewogIGlmIGNvbW1hbmQgLXYgJDEgPi9kZXYvbnVsbCAyPiYxCiAgdGhlbgogICAg
cmV0dXJuIDAKICBlbHNlCiAgICByZXR1cm4gMQogIGZpCn0KCiMgT3V0cHV0IHRoZSBpbnN0cnVj
dGlvbnMgdG8gcmVwb3J0IGJ1ZyBhYm91dCB0aGlzIHNjcmlwdApyZXBvcnRfYnVnKCkgewogIGVj
aG8gIlZlcnNpb246ICR2ZXJzaW9uIgogIGVjaG8gIiIKICBlY2hvICJQbGVhc2UgZmlsZSBhIEJ1
ZyBSZXBvcnQgYXQgaHR0cHM6Ly9naXRodWIuY29tL2NoZWYvb21uaXRydWNrL2lzc3Vlcy9uZXci
CiAgZWNobyAiQWx0ZXJuYXRpdmVseSwgZmVlbCBmcmVlIHRvIG9wZW4gYSBTdXBwb3J0IFRpY2tl
dCBhdCBodHRwczovL3d3dy5jaGVmLmlvL3N1cHBvcnQvdGlja2V0cyIKICBlY2hvICJNb3JlIENo
ZWYgc3VwcG9ydCByZXNvdXJjZXMgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmNoZWYuaW8v
c3VwcG9ydCIKICBlY2hvICIiCiAgZWNobyAiUGxlYXNlIGluY2x1ZGUgYXMgbWFueSBkZXRhaWxz
IGFib3V0IHRoZSBwcm9ibGVtIGFzIHBvc3NpYmxlIGkuZS4sIGhvdyB0byByZXByb2R1Y2UiCiAg
ZWNobyAidGhlIHByb2JsZW0gKGlmIHBvc3NpYmxlKSwgdHlwZSBvZiB0aGUgT3BlcmF0aW5nIFN5
c3RlbSBhbmQgaXRzIHZlcnNpb24sIGV0Yy4sIgogIGVjaG8gImFuZCBhbnkgb3RoZXIgcmVsZXZh
bnQgZGV0YWlscyB0aGF0IG1pZ2h0IGhlbHAgdXMgd2l0aCB0cm91Ymxlc2hvb3RpbmcuIgogIGVj
aG8gIiIKfQoKY2hlY2tzdW1fbWlzbWF0Y2goKSB7CiAgZWNobyAiUGFja2FnZSBjaGVja3N1bSBt
aXNtYXRjaCEiCiAgcmVwb3J0X2J1ZwogIGV4aXQgMQp9Cgp1bmFibGVfdG9fcmV0cmlldmVfcGFj
a2FnZSgpIHsKICBlY2hvICJVbmFibGUgdG8gcmV0cmlldmUgYSB2YWxpZCBwYWNrYWdlISIKICBy
ZXBvcnRfYnVnCiAgZWNobyAiTWV0YWRhdGEgVVJMOiAkbWV0YWRhdGFfdXJsIgogIGlmIHRlc3Qg
IngkZG93bmxvYWRfdXJsIiAhPSAieCI7IHRoZW4KICAgIGVjaG8gIkRvd25sb2FkIFVSTDogJGRv
d25sb2FkX3VybCIKICBmaQogIGlmIHRlc3QgIngkc3RkZXJyX3Jlc3VsdHMiICE9ICJ4IjsgdGhl
bgogICAgZWNobyAiXG5ERUJVRyBPVVRQVVQgRk9MTE9XUzpcbiRzdGRlcnJfcmVzdWx0cyIKICBm
aQogIGV4aXQgMQp9CgpodHRwXzQwNF9lcnJvcigpIHsKICBlY2hvICJPbW5pdHJ1Y2sgYXJ0aWZh
Y3QgZG9lcyBub3QgZXhpc3QgZm9yIHZlcnNpb24gJHZlcnNpb24gb24gcGxhdGZvcm0gJHBsYXRm
b3JtIgogIGVjaG8gIiIKICBlY2hvICJFaXRoZXIgdGhpcyBtZWFuczoiCiAgZWNobyAiICAgLSBX
ZSBkbyBub3Qgc3VwcG9ydCAkcGxhdGZvcm0iCiAgZWNobyAiICAgLSBXZSBkbyBub3QgaGF2ZSBh
biBhcnRpZmFjdCBmb3IgJHZlcnNpb24iCiAgZWNobyAiIgogIGVjaG8gIlRoaXMgaXMgb2Z0ZW4g
dGhlIGxhdHRlciBjYXNlIGR1ZSB0byBydW5uaW5nIGEgcHJlcmVsZWFzZSBvciBSQyB2ZXJzaW9u
IG9mIGNoZWYiCiAgZWNobyAib3IgYSBnZW0gdmVyc2lvbiB3aGljaCB3YXMgb25seSBwdXNoZWQg
dG8gcnVieWdlbXMgYW5kIG5vdCBvbW5pdHJ1Y2suIgogIGVjaG8gIiIKICBlY2hvICJZb3UgbWF5
IGJlIGFibGUgdG8gc2V0IHlvdXIga25pZmVbOmJvb3RzdHJhcF92ZXJzaW9uXSB0byB0aGUgbW9z
dCByZWNlbnQgc3RhYmxlIgogIGVjaG8gInJlbGVhc2Ugb2YgQ2hlZiB0byBmaXggdGhpcyBwcm9i
bGVtIChvciB0aGUgbW9zdCByZWNlbnQgc3RhYmxlIG1ham9yIHZlcnNpb24gbnVtYmVyKS4iCiAg
ZWNobyAiIgogIGVjaG8gIkluIG9yZGVyIHRvIHRlc3QgdGhlIHZlcnNpb24gcGFyYW1ldGVyLCBh
ZHZlbnR1cm91cyB1c2VycyBtYXkgdGFrZSB0aGUgTWV0YWRhdGEgVVJMIgogIGVjaG8gImJlbG93
IGFuZCBtb2RpZnkgdGhlICcmdj08bnVtYmVyPicgcGFyYW1ldGVyIHVudGlsIHlvdSBzdWNjZXNz
ZnVsbHkgZ2V0IGEgVVJMIHRoYXQiCiAgZWNobyAiZG9lcyBub3QgNDA0IChlLmcuIHZpYSBjdXJs
IG9yIHdnZXQpLiAgWW91IHNob3VsZCBiZSBhYmxlIHRvIHVzZSAnJnY9MTEnIG9yICcmdj0xMici
CiAgZWNobyAic3VjY2VzZnVsbHkuIgogIGVjaG8gIiIKICBlY2hvICJJZiB5b3UgY2Fubm90IGZp
eCB0aGlzIHByb2JsZW0gYnkgc2V0dGluZyB0aGUgYm9vdHN0cmFwX3ZlcnNpb24sIGl0IHByb2Jh
Ymx5IG1lYW5zIgogIGVjaG8gInRoYXQgJHBsYXRmb3JtIGlzIG5vdCBzdXBwb3J0ZWQuIgogIGVj
aG8gIiIKICAjIGRlbGliZXJhdGVseSBkbyBub3QgY2FsbCByZXBvcnRfYnVnIHRvIHN1cHByZXNz
IGJ1ZyByZXBvcnQgbm9pc2UuCiAgZWNobyAiTWV0YWRhdGEgVVJMOiAkbWV0YWRhdGFfdXJsIgog
IGlmIHRlc3QgIngkZG93bmxvYWRfdXJsIiAhPSAieCI7IHRoZW4KICAgIGVjaG8gIkRvd25sb2Fk
IFVSTDogJGRvd25sb2FkX3VybCIKICBmaQogIGlmIHRlc3QgIngkc3RkZXJyX3Jlc3VsdHMiICE9
ICJ4IjsgdGhlbgogICAgZWNobyAiXG5ERUJVRyBPVVRQVVQgRk9MTE9XUzpcbiRzdGRlcnJfcmVz
dWx0cyIKICBmaQogIGV4aXQgMQp9CgpjYXB0dXJlX3RtcF9zdGRlcnIoKSB7CiAgIyBzcG9vbCB1
cCAvdG1wL3N0ZGVyciBmcm9tIGFsbCB0aGUgY29tbWFuZHMgd2UgY2FsbGVkCiAgaWYgdGVzdCAt
ZiAiJHRtcF9kaXIvc3RkZXJyIjsgdGhlbgogICAgb3V0cHV0PWBjYXQgJHRtcF9kaXIvc3RkZXJy
YAogICAgc3RkZXJyX3Jlc3VsdHM9IiR7c3RkZXJyX3Jlc3VsdHN9XG5TVERFUlIgZnJvbSAkMTpc
blxuJG91dHB1dFxuIgogICAgcm0gJHRtcF9kaXIvc3RkZXJyCiAgZmkKfQoKIyBkb193Z2V0IFVS
TCBGSUxFTkFNRQpkb193Z2V0KCkgewogIGVjaG8gInRyeWluZyB3Z2V0Li4uIgogIHdnZXQgLS11
c2VyLWFnZW50PSJVc2VyLUFnZW50OiBtaXhsaWItaW5zdGFsbC8zLjExLjIxIiAtTyAiJDIiICIk
MSIgMj4kdG1wX2Rpci9zdGRlcnIKICByYz0kPwogICMgY2hlY2sgZm9yIDQwNAogIGdyZXAgIkVS
Uk9SIDQwNCIgJHRtcF9kaXIvc3RkZXJyIDI+JjEgPi9kZXYvbnVsbAogIGlmIHRlc3QgJD8gLWVx
IDA7IHRoZW4KICAgIGVjaG8gIkVSUk9SIDQwNCIKICAgIGh0dHBfNDA0X2Vycm9yCiAgZmkKCiAg
IyBjaGVjayBmb3IgYmFkIHJldHVybiBzdGF0dXMgb3IgZW1wdHkgb3V0cHV0CiAgaWYgdGVzdCAk
cmMgLW5lIDAgfHwgdGVzdCAhIC1zICIkMiI7IHRoZW4KICAgIGNhcHR1cmVfdG1wX3N0ZGVyciAi
d2dldCIKICAgIHJldHVybiAxCiAgZmkKCiAgcmV0dXJuIDAKfQoKIyBkb19jdXJsIFVSTCBGSUxF
TkFNRQpkb19jdXJsKCkgewogIGVjaG8gInRyeWluZyBjdXJsLi4uIgogIGN1cmwgLUEgIlVzZXIt
QWdlbnQ6IG1peGxpYi1pbnN0YWxsLzMuMTEuMjEiIC0tcmV0cnkgNSAtc0wgLUQgJHRtcF9kaXIv
c3RkZXJyICIkMSIgPiAiJDIiCiAgcmM9JD8KICAjIGNoZWNrIGZvciA0MDQKICBncmVwICI0MDQg
Tm90IEZvdW5kIiAkdG1wX2Rpci9zdGRlcnIgMj4mMSA+L2Rldi9udWxsCiAgaWYgdGVzdCAkPyAt
ZXEgMDsgdGhlbgogICAgZWNobyAiRVJST1IgNDA0IgogICAgaHR0cF80MDRfZXJyb3IKICBmaQoK
ICAjIGNoZWNrIGZvciBiYWQgcmV0dXJuIHN0YXR1cyBvciBlbXB0eSBvdXRwdXQKICBpZiB0ZXN0
ICRyYyAtbmUgMCB8fCB0ZXN0ICEgLXMgIiQyIjsgdGhlbgogICAgY2FwdHVyZV90bXBfc3RkZXJy
ICJjdXJsIgogICAgcmV0dXJuIDEKICBmaQoKICByZXR1cm4gMAp9CgojIGRvX2ZldGNoIFVSTCBG
SUxFTkFNRQpkb19mZXRjaCgpIHsKICBlY2hvICJ0cnlpbmcgZmV0Y2guLi4iCiAgZmV0Y2ggLS11
c2VyLWFnZW50PSJVc2VyLUFnZW50OiBtaXhsaWItaW5zdGFsbC8zLjExLjIxIiAtbyAiJDIiICIk
MSIgMj4kdG1wX2Rpci9zdGRlcnIKICAjIGNoZWNrIGZvciBiYWQgcmV0dXJuIHN0YXR1cwogIHRl
c3QgJD8gLW5lIDAgJiYgcmV0dXJuIDEKICByZXR1cm4gMAp9CgojIGRvX3BlcmwgVVJMIEZJTEVO
QU1FCmRvX3BlcmwoKSB7CiAgZWNobyAidHJ5aW5nIHBlcmwuLi4iCiAgcGVybCAtZSAndXNlIExX
UDo6U2ltcGxlOyBnZXRwcmludCgkQVJHVlswXSk7JyAiJDEiID4gIiQyIiAyPiR0bXBfZGlyL3N0
ZGVycgogIHJjPSQ/CiAgIyBjaGVjayBmb3IgNDA0CiAgZ3JlcCAiNDA0IE5vdCBGb3VuZCIgJHRt
cF9kaXIvc3RkZXJyIDI+JjEgPi9kZXYvbnVsbAogIGlmIHRlc3QgJD8gLWVxIDA7IHRoZW4KICAg
IGVjaG8gIkVSUk9SIDQwNCIKICAgIGh0dHBfNDA0X2Vycm9yCiAgZmkKCiAgIyBjaGVjayBmb3Ig
YmFkIHJldHVybiBzdGF0dXMgb3IgZW1wdHkgb3V0cHV0CiAgaWYgdGVzdCAkcmMgLW5lIDAgfHwg
dGVzdCAhIC1zICIkMiI7IHRoZW4KICAgIGNhcHR1cmVfdG1wX3N0ZGVyciAicGVybCIKICAgIHJl
dHVybiAxCiAgZmkKCiAgcmV0dXJuIDAKfQoKIyBkb19weXRob24gVVJMIEZJTEVOQU1FCmRvX3B5
dGhvbigpIHsKICBlY2hvICJ0cnlpbmcgcHl0aG9uLi4uIgogIHB5dGhvbiAtYyAiaW1wb3J0IHN5
cyx1cmxsaWIyOyBzeXMuc3Rkb3V0LndyaXRlKHVybGxpYjIudXJsb3Blbih1cmxsaWIyLlJlcXVl
c3Qoc3lzLmFyZ3ZbMV0sIGhlYWRlcnM9eyAnVXNlci1BZ2VudCc6ICdtaXhsaWItaW5zdGFsbC8z
LjExLjIxJyB9KSkucmVhZCgpKSIgIiQxIiA+ICIkMiIgMj4kdG1wX2Rpci9zdGRlcnIKICByYz0k
PwogICMgY2hlY2sgZm9yIDQwNAogIGdyZXAgIkhUVFAgRXJyb3IgNDA0IiAkdG1wX2Rpci9zdGRl
cnIgMj4mMSA+L2Rldi9udWxsCiAgaWYgdGVzdCAkPyAtZXEgMDsgdGhlbgogICAgZWNobyAiRVJS
T1IgNDA0IgogICAgaHR0cF80MDRfZXJyb3IKICBmaQoKICAjIGNoZWNrIGZvciBiYWQgcmV0dXJu
IHN0YXR1cyBvciBlbXB0eSBvdXRwdXQKICBpZiB0ZXN0ICRyYyAtbmUgMCB8fCB0ZXN0ICEgLXMg
IiQyIjsgdGhlbgogICAgY2FwdHVyZV90bXBfc3RkZXJyICJweXRob24iCiAgICByZXR1cm4gMQog
IGZpCiAgcmV0dXJuIDAKfQoKIyByZXR1cm5zIDAgaWYgY2hlY2tzdW1zIG1hdGNoCmRvX2NoZWNr
c3VtKCkgewogIGlmIGV4aXN0cyBzaGEyNTZzdW07IHRoZW4KICAgIGVjaG8gIkNvbXBhcmluZyBj
aGVja3N1bSB3aXRoIHNoYTI1NnN1bS4uLiIKICAgIGNoZWNrc3VtPWBzaGEyNTZzdW0gJDEgfCBh
d2sgJ3sgcHJpbnQgJDEgfSdgCiAgICByZXR1cm4gYHRlc3QgIngkY2hlY2tzdW0iID0gIngkMiJg
CiAgZWxpZiBleGlzdHMgc2hhc3VtOyB0aGVuCiAgICBlY2hvICJDb21wYXJpbmcgY2hlY2tzdW0g
d2l0aCBzaGFzdW0uLi4iCiAgICBjaGVja3N1bT1gc2hhc3VtIC1hIDI1NiAkMSB8IGF3ayAneyBw
cmludCAkMSB9J2AKICAgIHJldHVybiBgdGVzdCAieCRjaGVja3N1bSIgPSAieCQyImAKICBlbHNl
CiAgICBlY2hvICJXQVJOSU5HOiBjb3VsZCBub3QgZmluZCBhIHZhbGlkIGNoZWNrc3VtIHByb2dy
YW0sIHByZS1pbnN0YWxsIHNoYXN1bSBvciBzaGEyNTZzdW0gaW4geW91ciBPL1MgaW1hZ2UgdG8g
Z2V0IHZhbGRhdGlvbi4uLiIKICAgIHJldHVybiAwCiAgZmkKfQoKIyBkb19kb3dubG9hZCBVUkwg
RklMRU5BTUUKZG9fZG93bmxvYWQoKSB7CiAgZWNobyAiZG93bmxvYWRpbmcgJDEiCiAgZWNobyAi
ICB0byBmaWxlICQyIgoKICB1cmw9YGVjaG8gJDFgCiAgaWYgdGVzdCAieCRwbGF0Zm9ybSIgPSAi
eHNvbGFyaXMyIjsgdGhlbgogICAgaWYgdGVzdCAieCRwbGF0Zm9ybV92ZXJzaW9uIiA9ICJ4NS45
IiAtbyAieCRwbGF0Zm9ybV92ZXJzaW9uIiA9ICJ4NS4xMCI7IHRoZW4KICAgICAgIyBzb2xhcmlz
IDkgbGFja3Mgb3BlbnNzbCwgc29sYXJpcyAxMCBsYWNrcyByZWNlbnQgZW5vdWdoIGNyZWRlbnRp
YWxzIC0geW91ciBiYXNlIE8vUyBpcyBjb21wbGV0ZWx5IGluc2VjdXJlLCBwbGVhc2UgdXBncmFk
ZQogICAgICB1cmw9YGVjaG8gJHVybCB8IHNlZCAtZSAncy9odHRwcy9odHRwLydgCiAgICBmaQog
IGZpCgogICMgd2UgdHJ5IGFsbCBvZiB0aGVzZSB1bnRpbCB3ZSBnZXQgc3VjY2Vzcy4KICAjIHBl
cmwsIGluIHBhcnRpY3VsYXIgbWF5IGJlIHByZXNlbnQgYnV0IExXUDo6U2ltcGxlIG1heSBub3Qg
YmUgaW5zdGFsbGVkCgogIGlmIGV4aXN0cyB3Z2V0OyB0aGVuCiAgICBkb193Z2V0ICR1cmwgJDIg
JiYgcmV0dXJuIDAKICBmaQoKICBpZiBleGlzdHMgY3VybDsgdGhlbgogICAgZG9fY3VybCAkdXJs
ICQyICYmIHJldHVybiAwCiAgZmkKCiAgaWYgZXhpc3RzIGZldGNoOyB0aGVuCiAgICBkb19mZXRj
aCAkdXJsICQyICYmIHJldHVybiAwCiAgZmkKCiAgaWYgZXhpc3RzIHBlcmw7IHRoZW4KICAgIGRv
X3BlcmwgJHVybCAkMiAmJiByZXR1cm4gMAogIGZpCgogIGlmIGV4aXN0cyBweXRob247IHRoZW4K
ICAgIGRvX3B5dGhvbiAkdXJsICQyICYmIHJldHVybiAwCiAgZmkKCiAgdW5hYmxlX3RvX3JldHJp
ZXZlX3BhY2thZ2UKfQoKIyBpbnN0YWxsX2ZpbGUgVFlQRSBGSUxFTkFNRQojIFRZUEUgaXMgInJw
bSIsICJkZWIiLCAic29sYXJpcyIsICJzaCIsIGV0Yy4KaW5zdGFsbF9maWxlKCkgewogIGVjaG8g
Ikluc3RhbGxpbmcgJHByb2plY3QgJHZlcnNpb24iCiAgY2FzZSAiJDEiIGluCiAgICAicnBtIikK
ICAgICAgaWYgdGVzdCAieCRwbGF0Zm9ybSIgPSAieG5leHVzIiB8fCB0ZXN0ICJ4JHBsYXRmb3Jt
IiA9ICJ4aW9zX3hyIjsgdGhlbgogICAgICAgIGVjaG8gImluc3RhbGxpbmcgd2l0aCB5dW0uLi4i
CiAgICAgICAgeXVtIGluc3RhbGwgLXl2ICIkMiIKICAgICAgZWxzZQogICAgICAgIGVjaG8gImlu
c3RhbGxpbmcgd2l0aCBycG0uLi4iCiAgICAgICAgcnBtIC1VdmggLS1vbGRwYWNrYWdlIC0tcmVw
bGFjZXBrZ3MgIiQyIgogICAgICBmaQogICAgICA7OwogICAgImRlYiIpCiAgICAgIGVjaG8gImlu
c3RhbGxpbmcgd2l0aCBkcGtnLi4uIgogICAgICBkcGtnIC1pICIkMiIKICAgICAgOzsKICAgICJi
ZmYiKQogICAgICBlY2hvICJpbnN0YWxsaW5nIHdpdGggaW5zdGFsbHAuLi4iCiAgICAgIGluc3Rh
bGxwIC1hWFlnZCAiJDIiIGFsbAogICAgICA7OwogICAgInNvbGFyaXMiKQogICAgICBlY2hvICJp
bnN0YWxsaW5nIHdpdGggcGtnYWRkLi4uIgogICAgICBlY2hvICJjb25mbGljdD1ub2NoZWNrIiA+
ICR0bXBfZGlyL25vY2hlY2sKICAgICAgZWNobyAiYWN0aW9uPW5vY2hlY2siID4+ICR0bXBfZGly
L25vY2hlY2sKICAgICAgZWNobyAibWFpbD0iID4+ICR0bXBfZGlyL25vY2hlY2sKICAgICAgcGtn
cm0gLWEgJHRtcF9kaXIvbm9jaGVjayAtbiAkcHJvamVjdCA+L2Rldi9udWxsIDI+JjEgfHwgdHJ1
ZQogICAgICBwa2dhZGQgLUcgLW4gLWQgIiQyIiAtYSAkdG1wX2Rpci9ub2NoZWNrICRwcm9qZWN0
CiAgICAgIDs7CiAgICAicGtnIikKICAgICAgZWNobyAiaW5zdGFsbGluZyB3aXRoIGluc3RhbGxl
ci4uLiIKICAgICAgY2QgLyAmJiAvdXNyL3NiaW4vaW5zdGFsbGVyIC1wa2cgIiQyIiAtdGFyZ2V0
IC8KICAgICAgOzsKICAgICJkbWciKQogICAgICBlY2hvICJpbnN0YWxsaW5nIGRtZyBmaWxlLi4u
IgogICAgICBoZGl1dGlsIGRldGFjaCAiL1ZvbHVtZXMvY2hlZl9zb2Z0d2FyZSIgPi9kZXYvbnVs
bCAyPiYxIHx8IHRydWUKICAgICAgaGRpdXRpbCBhdHRhY2ggIiQyIiAtbW91bnRwb2ludCAiL1Zv
bHVtZXMvY2hlZl9zb2Z0d2FyZSIKICAgICAgY2QgLyAmJiAvdXNyL3NiaW4vaW5zdGFsbGVyIC1w
a2cgYGZpbmQgIi9Wb2x1bWVzL2NoZWZfc29mdHdhcmUiIC1uYW1lIFwqLnBrZ2AgLXRhcmdldCAv
CiAgICAgIGhkaXV0aWwgZGV0YWNoICIvVm9sdW1lcy9jaGVmX3NvZnR3YXJlIgogICAgICA7Owog
ICAgInNoIiApCiAgICAgIGVjaG8gImluc3RhbGxpbmcgd2l0aCBzaC4uLiIKICAgICAgc2ggIiQy
IgogICAgICA7OwogICAgInA1cCIgKQogICAgICBlY2hvICJpbnN0YWxsaW5nIHA1cCBwYWNrYWdl
Li4uIgogICAgICBwa2cgaW5zdGFsbCAtZyAiJDIiICRwcm9qZWN0CiAgICAgIDs7CiAgICAqKQog
ICAgICBlY2hvICJVbmtub3duIGZpbGV0eXBlOiAkMSIKICAgICAgcmVwb3J0X2J1ZwogICAgICBl
eGl0IDEKICAgICAgOzsKICBlc2FjCiAgaWYgdGVzdCAkPyAtbmUgMDsgdGhlbgogICAgZWNobyAi
SW5zdGFsbGF0aW9uIGZhaWxlZCIKICAgIHJlcG9ydF9idWcKICAgIGV4aXQgMQogIGZpCn0KCmlm
IHRlc3QgIngkVE1QRElSIiA9ICJ4IjsgdGhlbgogIHRtcD0iL3RtcCIKZWxzZQogIHRtcD0kVE1Q
RElSCmZpCiMgc2VjdXJlLWlzaCB0ZW1wIGRpciBjcmVhdGlvbiB3aXRob3V0IGhhdmluZyBta3Rl
bXAgYXZhaWxhYmxlIChERG9TLWFibGUgYnV0IG5vdCBleHBsb2l0YWJsZSkKdG1wX2Rpcj0iJHRt
cC9pbnN0YWxsLnNoLiQkIgoodW1hc2sgMDc3ICYmIG1rZGlyICR0bXBfZGlyKSB8fCBleGl0IDEK
CiMjIyMjIyMjIyMjIwojIGVuZCBvZiBoZWxwZXJzLnNoCiMjIyMjIyMjIyMjIwoKCiMgc2NyaXB0
X2NsaV9wYXJhbWV0ZXJzLnNoCiMjIyMjIyMjIyMjIwojIFRoaXMgc2VjdGlvbiByZWFkcyB0aGUg
Q0xJIHBhcmFtZXRlcnMgZm9yIHRoZSBpbnN0YWxsIHNjcmlwdCBhbmQgdHJhbnNsYXRlcwojICAg
dGhlbSB0byB0aGUgbG9jYWwgcGFyYW1ldGVycyB0byBiZSB1c2VkIGxhdGVyIGJ5IHRoZSBzY3Jp
cHQuCiMKIyBPdXRwdXRzOgojICR2ZXJzaW9uOiBSZXF1ZXN0ZWQgdmVyc2lvbiB0byBiZSBpbnN0
YWxsZWQuCiMgJGNoYW5uZWw6IENoYW5uZWwgdG8gaW5zdGFsbCB0aGUgcHJvZHVjdCBmcm9tCiMg
JHByb2plY3Q6IFByb2plY3QgdG8gYmUgaW5zdGFsbGVkCiMgJGNtZGxpbmVfZmlsZW5hbWU6IE5h
bWUgb2YgdGhlIHBhY2thZ2UgZG93bmxvYWRlZCBvbiBsb2NhbCBkaXNrLgojICRjbWRsaW5lX2Rs
X2RpcjogTmFtZSBvZiB0aGUgZGlyZWN0b3J5IGRvd25sb2FkZWQgcGFja2FnZSB3aWxsIGJlIHNh
dmVkIHRvIG9uIGxvY2FsIGRpc2suCiMgJGluc3RhbGxfc3RyYXRlZ3k6IE1ldGhvZCBvZiBwYWNr
YWdlIGluc3RhbGxhdGlvbnMuIGRlZmF1bHQgc3RyYXRlZ3kgaXMgdG8gYWx3YXlzIGluc3RhbGwg
dXBvbiBleGVjLiBTZXQgdG8gIm9uY2UiIHRvIHNraXAgaWYgcHJvamVjdCBpcyBpbnN0YWxsZWQK
IyAkZG93bmxvYWRfdXJsX292ZXJyaWRlOiBJbnN0YWxsIHBhY2thZ2UgZG93bmxvYWRlZCBmcm9t
IGEgZGlyZWN0IFVSTC4KIyAkY2hlY2tzdW06IFNIQTI1NiBmb3IgZG93bmxvYWRfdXJsX292ZXJy
aWRlIGZpbGUgKG9wdGlvbmFsKQojIyMjIyMjIyMjIyMKCiMgRGVmYXVsdHMKY2hhbm5lbD0ic3Rh
YmxlIgpwcm9qZWN0PSJjaGVmIgoKd2hpbGUgZ2V0b3B0cyBwbnY6YzpmOlA6ZDpzOmw6YSBvcHQK
ZG8KICBjYXNlICIkb3B0IiBpbgoKICAgIHYpICB2ZXJzaW9uPSIkT1BUQVJHIjs7CiAgICBjKSAg
Y2hhbm5lbD0iJE9QVEFSRyI7OwogICAgcCkgIGNoYW5uZWw9ImN1cnJlbnQiOzsgIyBjb21wYXQg
Zm9yIHByZXJlbGVhc2Ugb3B0aW9uCiAgICBuKSAgY2hhbm5lbD0iY3VycmVudCI7OyAjIGNvbXBh
dCBmb3IgbmlnaHRsaWVzIG9wdGlvbgogICAgZikgIGNtZGxpbmVfZmlsZW5hbWU9IiRPUFRBUkci
OzsKICAgIFApICBwcm9qZWN0PSIkT1BUQVJHIjs7CiAgICBkKSAgY21kbGluZV9kbF9kaXI9IiRP
UFRBUkciOzsKICAgIHMpICBpbnN0YWxsX3N0cmF0ZWd5PSIkT1BUQVJHIjs7CiAgICBsKSAgZG93
bmxvYWRfdXJsX292ZXJyaWRlPSIkT1BUQVJHIjs7CiAgICBhKSAgY2hlY2tzdW09IiRPUFRBUkci
OzsKICAgIFw/KSAgICMgdW5rbm93biBmbGFnCiAgICAgIGVjaG8gPiYyIFwKICAgICAgInVzYWdl
OiAkMCBbLVAgcHJvamVjdF0gWy1jIHJlbGVhc2VfY2hhbm5lbF0gWy12IHZlcnNpb25dIFstZiBm
aWxlbmFtZSB8IC1kIGRvd25sb2FkX2Rpcl0gWy1zIGluc3RhbGxfc3RyYXRlZ3ldIFstbCBkb3du
bG9hZF91cmxfb3ZlcnJpZGVdIFstYSBjaGVja3N1bV0iCiAgICAgIGV4aXQgMTs7CiAgZXNhYwpk
b25lCgpzaGlmdCBgZXhwciAkT1BUSU5EIC0gMWAKCgppZiB0ZXN0IC1kICIvb3B0LyRwcm9qZWN0
IiAmJiB0ZXN0ICJ4JGluc3RhbGxfc3RyYXRlZ3kiID0gInhvbmNlIjsgdGhlbgogIGVjaG8gIiRw
cm9qZWN0IGluc3RhbGxhdGlvbiBkZXRlY3RlZCIKICBlY2hvICJpbnN0YWxsX3N0cmF0ZWd5IHNl
dCB0byAnb25jZSciCiAgZWNobyAiTm90aGluZyB0byBpbnN0YWxsIgogIGV4aXQKZmkKCgojIHBs
YXRmb3JtX2RldGVjdGlvbi5zaAojIyMjIyMjIyMjIyMKIyBUaGlzIHNlY3Rpb24gbWFrZXMgcGxh
dGZvcm0gZGV0ZWN0aW9uIGNvbXBhdGlibGUgd2l0aCBvbW5pdHJ1Y2sgb24gdGhlIHN5c3RlbQoj
ICAgaXQgcnVucy4KIwojIE91dHB1dHM6CiMgJHBsYXRmb3JtOiBOYW1lIG9mIHRoZSBwbGF0Zm9y
bS4KIyAkcGxhdGZvcm1fdmVyc2lvbjogVmVyc2lvbiBvZiB0aGUgcGxhdGZvcm0uCiMgJG1hY2hp
bmU6IFN5c3RlbSdzIGFyY2hpdGVjdHVyZS4KIyMjIyMjIyMjIyMjCgojCiMgUGxhdGZvcm0gYW5k
IFBsYXRmb3JtIFZlcnNpb24gZGV0ZWN0aW9uCiMKIyBOT1RFOiBUaGlzIGxvZ2ljIHNob3VsZCBt
YXRjaCBvaGFpIHBsYXRmb3JtIGFuZCBwbGF0Zm9ybV92ZXJzaW9uIG1hdGNoaW5nLgojIGRvIG5v
dCBpbnZlbnQgbmV3IHBsYXRmb3JtIGFuZCBwbGF0Zm9ybV92ZXJzaW9uIHNjaGVtYXMsIGp1c3Qg
bWFrZSB0aGlzIGJlaGF2ZQojIGxpa2Ugd2hhdCBvaGFpIHJldHVybnMgYXMgcGxhdGZvcm0gYW5k
IHBsYXRmb3JtX3ZlcnNpb24gZm9yIHRoZSBzeXN0ZW0uCiMKIyBBTFNPIE5PVEU6IERvIG5vdCBt
YW5nbGUgcGxhdGZvcm0gb3IgcGxhdGZvcm1fdmVyc2lvbiBoZXJlLiAgSXQgaXMgbGVzcyBlcnJv
cgojIHByb25lIGFuZCBtb3JlIGZ1dHVyZS1wcm9vZiB0byBkbyB0aGF0IGluIHRoZSBzZXJ2ZXIs
IGFuZCB0aGVuIGFsbCBvbW5pdHJ1Y2sgY2xpZW50cwojIHdpbGwgJ2luaGVyaXQnIHRoZSBjaGFu
Z2VzIChpbnN0YWxsLnNoIGlzIG5vdCB0aGUgb25seSBjbGllbnQgb2YgdGhlIG9tbml0cnVjawoj
IGVuZHBvaW50IG91dCB0aGVyZSkuCiMKCm1hY2hpbmU9YHVuYW1lIC1tYApvcz1gdW5hbWUgLXNg
CgppZiB0ZXN0IC1mICIvZXRjL2xzYi1yZWxlYXNlIiAmJiBncmVwIERJU1RSSUJfSUQgL2V0Yy9s
c2ItcmVsZWFzZSA+L2Rldi9udWxsICYmICEgZ3JlcCB3cmxpbnV4IC9ldGMvbHNiLXJlbGVhc2Ug
Pi9kZXYvbnVsbDsgdGhlbgogIHBsYXRmb3JtPWBncmVwIERJU1RSSUJfSUQgL2V0Yy9sc2ItcmVs
ZWFzZSB8IGN1dCAtZCAiPSIgLWYgMiB8IHRyICdbQS1aXScgJ1thLXpdJ2AKICBwbGF0Zm9ybV92
ZXJzaW9uPWBncmVwIERJU1RSSUJfUkVMRUFTRSAvZXRjL2xzYi1yZWxlYXNlIHwgY3V0IC1kICI9
IiAtZiAyYAoKICBpZiB0ZXN0ICIkcGxhdGZvcm0iID0gIlwiY3VtdWx1cyBsaW51eFwiIjsgdGhl
bgogICAgcGxhdGZvcm09ImN1bXVsdXNfbGludXgiCiAgZWxpZiB0ZXN0ICIkcGxhdGZvcm0iID0g
IlwiY3VtdWx1cyBuZXR3b3Jrc1wiIjsgdGhlbgogICAgcGxhdGZvcm09ImN1bXVsdXNfbmV0d29y
a3MiCiAgZmkKCmVsaWYgdGVzdCAtZiAiL2V0Yy9kZWJpYW5fdmVyc2lvbiI7IHRoZW4KICBwbGF0
Zm9ybT0iZGViaWFuIgogIHBsYXRmb3JtX3ZlcnNpb249YGNhdCAvZXRjL2RlYmlhbl92ZXJzaW9u
YAplbGlmIHRlc3QgLWYgIi9ldGMvRW9zLXJlbGVhc2UiOyB0aGVuCiAgIyBFT1MgbWF5IGFsc28g
Y29udGFpbiAvZXRjL3JlZGhhdC1yZWxlYXNlIHNvIHRoaXMgY2hlY2sgbXVzdCBjb21lIGZpcnN0
LgogIHBsYXRmb3JtPWFyaXN0YV9lb3MKICBwbGF0Zm9ybV92ZXJzaW9uPWBhd2sgJ3twcmludCAk
NH0nIC9ldGMvRW9zLXJlbGVhc2VgCiAgbWFjaGluZT0iaTM4NiIKZWxpZiB0ZXN0IC1mICIvZXRj
L3JlZGhhdC1yZWxlYXNlIjsgdGhlbgogIHBsYXRmb3JtPWBzZWQgJ3MvXlwoLlwrXCkgcmVsZWFz
ZS4qL1wxLycgL2V0Yy9yZWRoYXQtcmVsZWFzZSB8IHRyICdbQS1aXScgJ1thLXpdJ2AKICBwbGF0
Zm9ybV92ZXJzaW9uPWBzZWQgJ3MvXi5cKyByZWxlYXNlIFwoWy4wLTldXCtcKS4qL1wxLycgL2V0
Yy9yZWRoYXQtcmVsZWFzZWAKCiAgaWYgdGVzdCAiJHBsYXRmb3JtIiA9ICJ4ZW5zZXJ2ZXIiOyB0
aGVuCiAgICAjIEN1cnJlbnQgWGVuU2VydmVyIDYuMiBpcyBiYXNlZCBvbiBDZW50T1MgNSwgcGxh
dGZvcm0gaXMgbm90IHJlc2V0IHRvICJlbCIgc2VydmVyIHNob3VsZCBoYW5sZGUgcmVzcG9uc2UK
ICAgIHBsYXRmb3JtPSJ4ZW5zZXJ2ZXIiCiAgZWxzZQogICAgIyBGSVhNRTogdXNlICJyZWRoYXQi
CiAgICBwbGF0Zm9ybT0iZWwiCiAgZmkKCmVsaWYgdGVzdCAtZiAiL2V0Yy9zeXN0ZW0tcmVsZWFz
ZSI7IHRoZW4KICBwbGF0Zm9ybT1gc2VkICdzL15cKC5cK1wpIHJlbGVhc2UuXCsvXDEvJyAvZXRj
L3N5c3RlbS1yZWxlYXNlIHwgdHIgJ1tBLVpdJyAnW2Etel0nYAogIHBsYXRmb3JtX3ZlcnNpb249
YHNlZCAncy9eLlwrIHJlbGVhc2UgXChbLjAtOV1cK1wpLiovXDEvJyAvZXRjL3N5c3RlbS1yZWxl
YXNlIHwgdHIgJ1tBLVpdJyAnW2Etel0nYAogIGNhc2UgJHBsYXRmb3JtIGluIGFtYXpvbiopICMg
c2ggY29tcGF0IG1ldGhvZCBvZiBjaGVja2luZyBmb3IgYSBzdWJzdHJpbmcKICAgIHBsYXRmb3Jt
PSJlbCIKCiAgICAuIC9ldGMvb3MtcmVsZWFzZQogICAgcGxhdGZvcm1fdmVyc2lvbj0kVkVSU0lP
Tl9JRAogICAgaWYgdGVzdCAiJHBsYXRmb3JtX3ZlcnNpb24iID0gIjIiOyB0aGVuCiAgICAgIHBs
YXRmb3JtX3ZlcnNpb249IjciCiAgICBlbHNlCiAgICAgICMgVkVSU0lPTl9JRCB3aWxsIG1hdGNo
IFlZWVkuTU0gZm9yIEFtYXpvbiBMaW51eCBBTUlzCiAgICAgIHBsYXRmb3JtX3ZlcnNpb249IjYi
CiAgICBmaQogIGVzYWMKCiMgQXBwbGUgT1MgWAplbGlmIHRlc3QgLWYgIi91c3IvYmluL3N3X3Zl
cnMiOyB0aGVuCiAgcGxhdGZvcm09Im1hY19vc194IgogICMgTWF0Y2hpbmcgdGhlIHRhYi1zcGFj
ZSB3aXRoIHNlZCBpcyBlcnJvci1wcm9uZQogIHBsYXRmb3JtX3ZlcnNpb249YHN3X3ZlcnMgfCBh
d2sgJy9eUHJvZHVjdFZlcnNpb246LyB7IHByaW50ICQyIH0nIHwgY3V0IC1kLiAtZjEsMmAKCiAg
IyB4ODZfNjQgQXBwbGUgaGFyZHdhcmUgb2Z0ZW4gcnVucyAzMi1iaXQga2VybmVscyAoc2VlIE9I
QUktNjMpCiAgeDg2XzY0PWBzeXNjdGwgLW4gaHcub3B0aW9uYWwueDg2XzY0YAogIGlmIHRlc3Qg
JHg4Nl82NCAtZXEgMTsgdGhlbgogICAgbWFjaGluZT0ieDg2XzY0IgogIGZpCmVsaWYgdGVzdCAt
ZiAiL2V0Yy9yZWxlYXNlIjsgdGhlbgogIG1hY2hpbmU9YC91c3IvYmluL3VuYW1lIC1wYAogIGlm
IGdyZXAgU21hcnRPUyAvZXRjL3JlbGVhc2UgPi9kZXYvbnVsbDsgdGhlbgogICAgcGxhdGZvcm09
InNtYXJ0b3MiCiAgICBwbGF0Zm9ybV92ZXJzaW9uPWBncmVwIF5JbWFnZSAvZXRjL3Byb2R1Y3Qg
fCBhd2sgJ3sgcHJpbnQgJDMgfSdgCiAgZWxzZQogICAgcGxhdGZvcm09InNvbGFyaXMyIgogICAg
cGxhdGZvcm1fdmVyc2lvbj1gL3Vzci9iaW4vdW5hbWUgLXJgCiAgZmkKZWxpZiB0ZXN0IC1mICIv
ZXRjL1N1U0UtcmVsZWFzZSI7IHRoZW4KICBpZiBncmVwICdFbnRlcnByaXNlJyAvZXRjL1N1U0Ut
cmVsZWFzZSA+L2Rldi9udWxsOwogIHRoZW4KICAgICAgcGxhdGZvcm09InNsZXMiCiAgICAgIHBs
YXRmb3JtX3ZlcnNpb249YGF3ayAnL15WRVJTSU9OLyB7ViA9ICQzfTsgL15QQVRDSExFVkVMLyB7
UCA9ICQzfTsgRU5EIHtwcmludCBWICIuIiBQfScgL2V0Yy9TdVNFLXJlbGVhc2VgCiAgZWxzZQog
ICAgICBwbGF0Zm9ybT0ib3BlbnN1c2VsZWFwIgogICAgICBwbGF0Zm9ybV92ZXJzaW9uPWBhd2sg
Jy9eVkVSU0lPTiA9LyB7IHByaW50ICQzIH0nIC9ldGMvU3VTRS1yZWxlYXNlYAogIGZpCmVsaWYg
dGVzdCAieCRvcyIgPSAieEZyZWVCU0QiOyB0aGVuCiAgcGxhdGZvcm09ImZyZWVic2QiCiAgcGxh
dGZvcm1fdmVyc2lvbj1gdW5hbWUgLXIgfCBzZWQgJ3MvLS4qLy8nYAplbGlmIHRlc3QgIngkb3Mi
ID0gInhBSVgiOyB0aGVuCiAgcGxhdGZvcm09ImFpeCIKICBwbGF0Zm9ybV92ZXJzaW9uPSJgdW5h
bWUgLXZgLmB1bmFtZSAtcmAiCiAgbWFjaGluZT0icG93ZXJwYyIKZWxpZiB0ZXN0IC1mICIvZXRj
L29zLXJlbGVhc2UiOyB0aGVuCiAgLiAvZXRjL29zLXJlbGVhc2UKICBpZiB0ZXN0ICJ4JENJU0NP
X1JFTEVBU0VfSU5GTyIgIT0gIngiOyB0aGVuCiAgICAuICRDSVNDT19SRUxFQVNFX0lORk8KICBm
aQoKICBwbGF0Zm9ybT0kSUQKICBwbGF0Zm9ybV92ZXJzaW9uPSRWRVJTSU9OCmZpCgppZiB0ZXN0
ICJ4JHBsYXRmb3JtIiA9ICJ4IjsgdGhlbgogIGVjaG8gIlVuYWJsZSB0byBkZXRlcm1pbmUgcGxh
dGZvcm0gdmVyc2lvbiEiCiAgcmVwb3J0X2J1ZwogIGV4aXQgMQpmaQoKIwojIE5PVEU6IHBsYXRm
b3JtIG1hbmdsaW5nIGluIHRoZSBpbnN0YWxsLnNoIGlzIERFUFJFQ0FURUQKIwojIC0gaW5zdGFs
bC5zaCBzaG91bGQgYmUgdHJ1ZSB0byBvaGFpIGFuZCBzaG91bGQgbm90IHJlbWFwCiMgICBwbGF0
Zm9ybSBvciBwbGF0Zm9ybSB2ZXJzaW9ucy4KIwojIC0gcmVtYXBwaW5nIHBsYXRmb3JtIGFuZCBt
YW5nbGluZyBwbGF0Zm9ybSB2ZXJzaW9uIG51bWJlcnMgaXMKIyAgIG5vdyB0aGUgY29tcGxldGUg
cmVzcG9uc2liaWxpdHkgb2YgdGhlIHNlcnZlci1zaWRlIGVuZHBvaW50cwojCgptYWpvcl92ZXJz
aW9uPWBlY2hvICRwbGF0Zm9ybV92ZXJzaW9uIHwgY3V0IC1kLiAtZjFgCmNhc2UgJHBsYXRmb3Jt
IGluCiAgIyBGSVhNRTogc2hvdWxkIHJlbW92ZSB0aGlzIGNhc2Ugc3RhdGVtZW50IGNvbXBsZXRl
bHkKICAiZWwiKQogICAgIyBGSVhNRTogICJlbCIgaXMgZGVwcmVjYXRlZCwgc2hvdWxkIHVzZSAi
cmVkaGF0IgogICAgcGxhdGZvcm1fdmVyc2lvbj0kbWFqb3JfdmVyc2lvbgogICAgOzsKICAiZGVi
aWFuIikKICAgIGlmIHRlc3QgIngkbWFqb3JfdmVyc2lvbiIgPSAieDUiOyB0aGVuCiAgICAgICMg
VGhpcyBpcyBoZXJlIGZvciBwb3RlbnRpYWwgYmFjay1jb21wYXQuCiAgICAgICMgV2UgZG8gbm90
IGhhdmUgNSBpbiB2ZXJzaW9ucyB3ZSBwdWJsaXNoIGZvciBhbnltb3JlIGJ1dCB3ZQogICAgICAj
IG1pZ2h0IGhhdmUgaXQgZm9yIGVhcmxpZXIgdmVyc2lvbnMuCiAgICAgIHBsYXRmb3JtX3ZlcnNp
b249IjYiCiAgICBlbHNlCiAgICAgIHBsYXRmb3JtX3ZlcnNpb249JG1ham9yX3ZlcnNpb24KICAg
IGZpCiAgICA7OwogICJmcmVlYnNkIikKICAgIHBsYXRmb3JtX3ZlcnNpb249JG1ham9yX3ZlcnNp
b24KICAgIDs7CiAgInNsZXMiKQogICAgcGxhdGZvcm1fdmVyc2lvbj0kbWFqb3JfdmVyc2lvbgog
ICAgOzsKICAib3BlbnN1c2VsZWFwIikKICAgIHBsYXRmb3JtX3ZlcnNpb249JG1ham9yX3ZlcnNp
b24KICAgIDs7CmVzYWMKCiMgbm9ybWFsaXplIHRoZSBhcmNoaXRlY3R1cmUgd2UgZGV0ZWN0ZWQK
Y2FzZSAkbWFjaGluZSBpbgogICJ4ODZfNjQifCJhbWQ2NCJ8Ing2NCIpCiAgICBtYWNoaW5lPSJ4
ODZfNjQiCiAgICA7OwogICJpMzg2InwiaTg2cGMifCJ4ODYifCJpNjg2IikKICAgIG1hY2hpbmU9
ImkzODYiCiAgICA7OwogICJzcGFyYyJ8InN1bjR1Inwic3VuNHYiKQogICAgbWFjaGluZT0ic3Bh
cmMiCiAgICA7Owplc2FjCgppZiB0ZXN0ICJ4JHBsYXRmb3JtX3ZlcnNpb24iID0gIngiOyB0aGVu
CiAgZWNobyAiVW5hYmxlIHRvIGRldGVybWluZSBwbGF0Zm9ybSB2ZXJzaW9uISIKICByZXBvcnRf
YnVnCiAgZXhpdCAxCmZpCgppZiB0ZXN0ICJ4JHBsYXRmb3JtIiA9ICJ4c29sYXJpczIiOyB0aGVu
CiAgIyBoYWNrIHVwIHRoZSBwYXRoIG9uIFNvbGFyaXMgdG8gZmluZCB3Z2V0LCBwa2dhZGQKICBQ
QVRIPS91c3Ivc2Z3L2JpbjovdXNyL3NiaW46JFBBVEgKICBleHBvcnQgUEFUSApmaQoKZWNobyAi
JHBsYXRmb3JtICRwbGF0Zm9ybV92ZXJzaW9uICRtYWNoaW5lIgoKIyMjIyMjIyMjIyMjCiMgZW5k
IG9mIHBsYXRmb3JtX2RldGVjdGlvbi5zaAojIyMjIyMjIyMjIyMKCgojIEFsbCBvZiB0aGUgZG93
bmxvYWQgdXRpbGl0aWVzIGluIHRoaXMgc2NyaXB0IGxvYWQgY29tbW9uIHByb3h5IGVudiB2YXJz
LgojIElmIHZhcmlhYmxlcyBhcmUgc2V0IHRoZXkgd2lsbCBvdmVycmlkZSBhbnkgZXhpc3Rpbmcg
ZW52IHZhcnMuCiMgT3RoZXJ3aXNlLCBkZWZhdWx0IHByb3h5IGVudiB2YXJzIHdpbGwgYmUgbG9h
ZGVkIGJ5IHRoZSByZXNwZWN0aXZlCiMgZG93bmxvYWQgdXRpbGl0eS4KCmlmIHRlc3QgIngkaHR0
cHNfcHJveHkiICE9ICJ4IjsgdGhlbgogIGVjaG8gInNldHRpbmcgaHR0cHNfcHJveHk6ICRodHRw
c19wcm94eSIKICBIVFRQU19QUk9YWT0kaHR0cHNfcHJveHkKICBodHRwc19wcm94eT0kaHR0cHNf
cHJveHkKICBleHBvcnQgSFRUUFNfUFJPWFkKICBleHBvcnQgaHR0cHNfcHJveHkKZmkKCmlmIHRl
c3QgIngkaHR0cF9wcm94eSIgIT0gIngiOyB0aGVuCiAgZWNobyAic2V0dGluZyBodHRwX3Byb3h5
OiAkaHR0cF9wcm94eSIKICBIVFRQX1BST1hZPSRodHRwX3Byb3h5CiAgaHR0cF9wcm94eT0kaHR0
cF9wcm94eQogIGV4cG9ydCBIVFRQX1BST1hZCiAgZXhwb3J0IGh0dHBfcHJveHkKZmkKCmlmIHRl
c3QgIngkZnRwX3Byb3h5IiAhPSAieCI7IHRoZW4KICBlY2hvICJzZXR0aW5nIGZ0cF9wcm94eTog
JGZ0cF9wcm94eSIKICBGVFBfUFJPWFk9JGZ0cF9wcm94eQogIGZ0cF9wcm94eT0kZnRwX3Byb3h5
CiAgZXhwb3J0IEZUUF9QUk9YWQogIGV4cG9ydCBmdHBfcHJveHkKZmkKCmlmIHRlc3QgIngkbm9f
cHJveHkiICE9ICJ4IjsgdGhlbgogIGVjaG8gInNldHRpbmcgbm9fcHJveHk6ICRub19wcm94eSIK
ICBOT19QUk9YWT0kbm9fcHJveHkKICBub19wcm94eT0kbm9fcHJveHkKICBleHBvcnQgTk9fUFJP
WFkKICBleHBvcnQgbm9fcHJveHkKZmkKCgojIGZldGNoX21ldGFkYXRhLnNoCiMjIyMjIyMjIyMj
IwojIFRoaXMgc2VjdGlvbiBjYWxscyBvbW5pdHJ1Y2sgdG8gZ2V0IHRoZSBpbmZvcm1hdGlvbiBh
Ym91dCB0aGUgYnVpbGQgdG8gYmUKIyAgIGluc3RhbGxlZC4KIwojIElucHV0czoKIyAkY2hhbm5l
bDoKIyAkcHJvamVjdDoKIyAkdmVyc2lvbjoKIyAkcGxhdGZvcm06CiMgJHBsYXRmb3JtX3ZlcnNp
b246CiMgJG1hY2hpbmU6CiMgJHRtcF9kaXI6CiMKIyBPdXRwdXRzOgojICRkb3dubG9hZF91cmw6
CiMgJHNoYTI1NjoKIyMjIyMjIyMjIyMjCgppZiB0ZXN0ICJ4JGRvd25sb2FkX3VybF9vdmVycmlk
ZSIgPSAieCI7IHRoZW4KICBlY2hvICJHZXR0aW5nIGluZm9ybWF0aW9uIGZvciAkcHJvamVjdCAk
Y2hhbm5lbCAkdmVyc2lvbiBmb3IgJHBsYXRmb3JtLi4uIgoKICBtZXRhZGF0YV9maWxlbmFtZT0i
JHRtcF9kaXIvbWV0YWRhdGEudHh0IgogIG1ldGFkYXRhX3VybD0iaHR0cHM6Ly9vbW5pdHJ1Y2su
Y2hlZi5pby8kY2hhbm5lbC8kcHJvamVjdC9tZXRhZGF0YT92PSR2ZXJzaW9uJnA9JHBsYXRmb3Jt
JnB2PSRwbGF0Zm9ybV92ZXJzaW9uJm09JG1hY2hpbmUiCgogIGRvX2Rvd25sb2FkICIkbWV0YWRh
dGFfdXJsIiAgIiRtZXRhZGF0YV9maWxlbmFtZSIKCiAgY2F0ICIkbWV0YWRhdGFfZmlsZW5hbWUi
CgogIGVjaG8gIiIKICAjIGNoZWNrIHRoYXQgYWxsIHRoZSBtYW5kYXRvcnkgZmllbGRzIGluIHRo
ZSBkb3dubG9hZGVkIG1ldGFkYXRhIGFyZSB0aGVyZQogIGlmIGdyZXAgJ151cmwnICRtZXRhZGF0
YV9maWxlbmFtZSA+IC9kZXYvbnVsbCAmJiBncmVwICdec2hhMjU2JyAkbWV0YWRhdGFfZmlsZW5h
bWUgPiAvZGV2L251bGw7IHRoZW4KICAgIGVjaG8gImRvd25sb2FkZWQgbWV0YWRhdGEgZmlsZSBs
b29rcyB2YWxpZC4uLiIKICBlbHNlCiAgICBlY2hvICJkb3dubG9hZGVkIG1ldGFkYXRhIGZpbGUg
aXMgY29ycnVwdGVkIG9yIGFuIHVuY2F1Z2h0IGVycm9yIHdhcyBlbmNvdW50ZXJlZCBpbiBkb3du
bG9hZGluZyB0aGUgZmlsZS4uLiIKICAgICMgdGhpcyBnZW5lcmFsbHkgbWVhbnMgb25lIG9mIHRo
ZSBkb3dubG9hZCBtZXRob2RzIGRvd25sb2FkZWQgYSA0MDQgb3Igc29tZXRoaW5nIGxpa2UgdGhh
dCBhbmQgdGhlbiByZXBvcnRlZCBhIHN1Y2Nlc3NmdWwgZXhpdCBjb2RlLAogICAgIyBhbmQgdGhp
cyBzaG91bGQgYmUgZml4ZWQgaW4gdGhlIGZ1bmN0aW9uIHRoYXQgd2FzIGRvaW5nIHRoZSBkb3du
bG9hZC4KICAgIHJlcG9ydF9idWcKICAgIGV4aXQgMQogIGZpCgogIGRvd25sb2FkX3VybD1gYXdr
ICckMSA9PSAidXJsIiB7IHByaW50ICQyIH0nICIkbWV0YWRhdGFfZmlsZW5hbWUiYAogIHNoYTI1
Nj1gYXdrICckMSA9PSAic2hhMjU2IiB7IHByaW50ICQyIH0nICIkbWV0YWRhdGFfZmlsZW5hbWUi
YAplbHNlCiAgZG93bmxvYWRfdXJsPSRkb3dubG9hZF91cmxfb3ZlcnJpZGUKICAjIFNldCBzaGEy
NTYgdG8gZW1wdHkgc3RyaW5nIGlmIGNoZWNrc3VtIG5vdCBzZXQKICBzaGEyNTY9JHtjaGVja3N1
bT0iIn0KZmkKCiMjIyMjIyMjIyMjIwojIGVuZCBvZiBmZXRjaF9tZXRhZGF0YS5zaAojIyMjIyMj
IyMjIyMKCgojIGZldGNoX3BhY2thZ2Uuc2gKIyMjIyMjIyMjIyMjCiMgVGhpcyBzZWN0aW9uIGZl
dGNoZXMgYSBwYWNrYWdlIGZyb20gJGRvd25sb2FkX3VybCBhbmQgdmVyaWZpZXMgaXRzIG1ldGFk
YXRhLgojCiMgSW5wdXRzOgojICRkb3dubG9hZF91cmw6CiMgJHRtcF9kaXI6CiMgT3B0aW9uYWwg
SW5wdXRzOgojICRjbWRsaW5lX2ZpbGVuYW1lOiBOYW1lIG9mIHRoZSBwYWNrYWdlIGRvd25sb2Fk
ZWQgb24gbG9jYWwgZGlzay4KIyAkY21kbGluZV9kbF9kaXI6IE5hbWUgb2YgdGhlIGRpcmVjdG9y
eSBkb3dubG9hZGVkIHBhY2thZ2Ugd2lsbCBiZSBzYXZlZCB0byBvbiBsb2NhbCBkaXNrLgojCiMg
T3V0cHV0czoKIyAkZG93bmxvYWRfZmlsZW5hbWU6IE5hbWUgb2YgdGhlIGRvd25sb2FkZWQgZmls
ZSBvbiBsb2NhbCBkaXNrLgojICRmaWxldHlwZTogVHlwZSBvZiB0aGUgZmlsZSBkb3dubG9hZGVk
LgojIyMjIyMjIyMjIyMKCmZpbGVuYW1lPWBlY2hvICRkb3dubG9hZF91cmwgfCBzZWQgLWUgJ3Mv
Xi4qXC8vLydgCmZpbGV0eXBlPWBlY2hvICRmaWxlbmFtZSB8IHNlZCAtZSAncy9eLipcLi8vJ2AK
CiMgdXNlIGVpdGhlciAkdG1wX2RpciwgdGhlIHByb3ZpZGVkIGRpcmVjdG9yeSAoLWQpIG9yIHRo
ZSBwcm92aWRlZCBmaWxlbmFtZSAoLWYpCmlmIHRlc3QgIngkY21kbGluZV9maWxlbmFtZSIgIT0g
IngiOyB0aGVuCiAgZG93bmxvYWRfZmlsZW5hbWU9IiRjbWRsaW5lX2ZpbGVuYW1lIgplbGlmIHRl
c3QgIngkY21kbGluZV9kbF9kaXIiICE9ICJ4IjsgdGhlbgogIGRvd25sb2FkX2ZpbGVuYW1lPSIk
Y21kbGluZV9kbF9kaXIvJGZpbGVuYW1lIgplbHNlCiAgZG93bmxvYWRfZmlsZW5hbWU9IiR0bXBf
ZGlyLyRmaWxlbmFtZSIKZmkKCiMgZW5zdXJlIHRoZSBwYXJlbnQgZGlyZWN0b3J5IHdoZXJlIHdl
IGRvd25sb2FkIHRoZSBpbnN0YWxsZXIgYWx3YXlzIGV4aXN0cwpkb3dubG9hZF9kaXI9YGRpcm5h
bWUgJGRvd25sb2FkX2ZpbGVuYW1lYAoodW1hc2sgMDc3ICYmIG1rZGlyIC1wICRkb3dubG9hZF9k
aXIpIHx8IGV4aXQgMQoKIyBjaGVjayBpZiB3ZSBoYXZlIHRoYXQgZmlsZSBsb2NhbGx5IGF2YWls
YWJsZSBhbmQgaWYgc28gdmVyaWZ5IHRoZSBjaGVja3N1bQojIFVzZSBjYXNlcwojIDEpIG1ldGFk
YXRhIC0gbmV3IGRvd25sb2FkCiMgMikgbWV0YWRhdGEgLSBjYWNoZWQgZG93bmxvYWQgd2hlbiBj
bWRsaW5lX2RsX2RpciBzZXQKIyAzKSB1cmwgb3ZlcnJpZGUgLSBubyBjaGVja3N1bSBuZXcgZG93
bmxvYWQKIyA0KSB1cmwgb3ZlcnJpZGUgLSB3aXRoIGNoZWNrc3VtIG5ldyBkb3dubG9hZAojIDUp
IHVybCBvdmVycmlkZSAtIHdpdGggY2hlY2tzdW0gY2FjaGVkIGRvd25sb2FkIHdoZW4gY21kbGlu
ZV9kbF9kaXIgc2V0CgpjYWNoZWRfZmlsZV9hdmFpbGFibGU9ImZhbHNlIgp2ZXJpZnlfY2hlY2tz
dW09InRydWUiCgppZiB0ZXN0IC1mICRkb3dubG9hZF9maWxlbmFtZTsgdGhlbgogIGVjaG8gIiRk
b3dubG9hZF9maWxlbmFtZSBleGlzdHMiCiAgY2FjaGVkX2ZpbGVfYXZhaWxhYmxlPSJ0cnVlIgpm
aQoKaWYgdGVzdCAieCRkb3dubG9hZF91cmxfb3ZlcnJpZGUiICE9ICJ4IjsgdGhlbgogIGVjaG8g
IkRvd25sb2FkIFVSTCBvdmVycmlkZSBzcGVjaWZpZWQiCiAgaWYgdGVzdCAieCRjYWNoZWRfZmls
ZV9hdmFpbGFibGUiID0gInh0cnVlIjsgdGhlbgogICAgZWNobyAiVmVyaWZ5aW5nIGxvY2FsIGZp
bGUiCiAgICBpZiB0ZXN0ICJ4JHNoYTI1NiIgPSAieCI7IHRoZW4KICAgICAgZWNobyAiQ2hlY2tz
dW0gbm90IHNwZWNpZmllZCwgaWdub3JpbmcgZXhpc3RpbmcgZmlsZSIKICAgICAgY2FjaGVkX2Zp
bGVfYXZhaWxhYmxlPSJmYWxzZSIgIyBkb3dubG9hZCBuZXcgZmlsZQogICAgICB2ZXJpZnlfY2hl
Y2tzdW09ImZhbHNlIiAjIG5vIGNoZWNrc3VtIHRvIGNvbXBhcmUgYWZ0ZXIgZG93bmxvYWQKICAg
IGVsaWYgZG9fY2hlY2tzdW0gIiRkb3dubG9hZF9maWxlbmFtZSIgIiRzaGEyNTYiOyB0aGVuCiAg
ICAgIGVjaG8gIkNoZWNrc3VtIG1hdGNoLCB1c2luZyBleGlzdGluZyBmaWxlIgogICAgICBjYWNo
ZWRfZmlsZV9hdmFpbGFibGU9InRydWUiICMgZG9uJ3QgbmVlZCB0byBkb3dubG9hZCBmaWxlCiAg
ICAgIHZlcmlmeV9jaGVja3N1bT0iZmFsc2UiICMgZG9uJ3QgbmVlZCB0byBjaGVja3N1bSBhZ2Fp
bgogICAgZWxzZQogICAgICBlY2hvICJDaGVja3N1bSBtaXNtYXRjaCwgaWdub3JpbmcgZXhpc3Rp
bmcgZmlsZSIKICAgICAgY2FjaGVkX2ZpbGVfYXZhaWxhYmxlPSJmYWxzZSIgIyBkb3dubG9hZCBu
ZXcgZmlsZQogICAgICB2ZXJpZnlfY2hlY2tzdW09InRydWUiICMgY2hlY2tzdW0gbmV3IGRvd25s
b2FkZWQgZmlsZQogICAgZmkKICBlbHNlCiAgICBlY2hvICIkZG93bmxvYWRfZmlsZW5hbWUgbm90
IGZvdW5kIgogICAgY2FjaGVkX2ZpbGVfYXZhaWxhYmxlPSJmYWxzZSIgIyBkb3dubG9hZCBuZXcg
ZmlsZQogICAgaWYgdGVzdCAieCRzaGEyNTYiID0gIngiOyB0aGVuCiAgICAgIHZlcmlmeV9jaGVj
a3N1bT0iZmFsc2UiICMgbm8gY2hlY2tzdW0gdG8gY29tcGFyZSBhZnRlciBkb3dubG9hZAogICAg
ZWxzZQogICAgICB2ZXJpZnlfY2hlY2tzdW09InRydWUiICMgY2hlY2tzdW0gbmV3IGRvd25sb2Fk
ZWQgZmlsZQogICAgZmkKICBmaQpmaQoKaWYgdGVzdCAieCRjYWNoZWRfZmlsZV9hdmFpbGFibGUi
ICE9ICJ4dHJ1ZSI7IHRoZW4KICBkb19kb3dubG9hZCAiJGRvd25sb2FkX3VybCIgIiRkb3dubG9h
ZF9maWxlbmFtZSIKZmkKCmlmIHRlc3QgIngkdmVyaWZ5X2NoZWNrc3VtIiA9ICJ4dHJ1ZSI7IHRo
ZW4KICBkb19jaGVja3N1bSAiJGRvd25sb2FkX2ZpbGVuYW1lIiAiJHNoYTI1NiIgfHwgY2hlY2tz
dW1fbWlzbWF0Y2gKZmkKCiMjIyMjIyMjIyMjIwojIGVuZCBvZiBmZXRjaF9wYWNrYWdlLnNoCiMj
IyMjIyMjIyMjIwoKCiMgaW5zdGFsbF9wYWNrYWdlLnNoCiMjIyMjIyMjIyMjIwojIEluc3RhbGxz
IGEgcGFja2FnZSBhbmQgcmVtb3ZlZCB0aGUgdGVtcCBkaXJlY3RvcnkuCiMKIyBJbnB1dHM6CiMg
JGRvd25sb2FkX2ZpbGVuYW1lOiBOYW1lIG9mIHRoZSBmaWxlIHRvIGJlIGluc3RhbGxlZC4KIyAk
ZmlsZXR5cGU6IFR5cGUgb2YgdGhlIGZpbGUgdG8gYmUgaW5zdGFsbGVkLgojICR2ZXJzaW9uOiBU
aGUgdmVyc2lvbiByZXF1ZXN0ZWQuIFVzZWQgb25seSBmb3Igd2FybmluZyB1c2VyIGlmIG5vdCBz
ZXQuCiMjIyMjIyMjIyMjIwoKaWYgdGVzdCAieCR2ZXJzaW9uIiA9ICJ4IiAtYSAieCRDSSIgIT0g
Inh0cnVlIjsgdGhlbgogIGVjaG8KICBlY2hvICJXQVJOSU5HIFdBUk5JTkcgV0FSTklORyBXQVJO
SU5HIFdBUk5JTkcgV0FSTklORyBXQVJOSU5HIFdBUk5JTkcgV0FSTklORyIKICBlY2hvCiAgZWNo
byAiWW91IGFyZSBpbnN0YWxsaW5nIGEgcGFja2FnZSB3aXRob3V0IGEgdmVyc2lvbiBwaW4uICBJ
ZiB5b3UgYXJlIGluc3RhbGxpbmciCiAgZWNobyAib24gcHJvZHVjdGlvbiBzZXJ2ZXJzIHZpYSBh
biBhdXRvbWF0ZWQgcHJvY2VzcyB0aGlzIGlzIERBTkdFUk9VUyBhbmQgeW91IHdpbGwiCiAgZWNo
byAiYmUgdXBncmFkZWQgd2l0aG91dCB3YXJuaW5nIG9uIG5ldyByZWxlYXNlcywgZXZlbiB0byBu
ZXcgbWFqb3IgcmVsZWFzZXMuIgogIGVjaG8gIkxldHRpbmcgdGhlIHZlcnNpb24gZmxvYXQgaXMg
b25seSBhcHByb3ByaWF0ZSBpbiBkZXNrdG9wLCB0ZXN0LCBkZXZlbG9wbWVudCBvciIKICBlY2hv
ICJDSS9DRCBlbnZpcm9ubWVudHMuIgogIGVjaG8KICBlY2hvICJXQVJOSU5HIFdBUk5JTkcgV0FS
TklORyBXQVJOSU5HIFdBUk5JTkcgV0FSTklORyBXQVJOSU5HIFdBUk5JTkcgV0FSTklORyIKICBl
Y2hvCmZpCgppbnN0YWxsX2ZpbGUgJGZpbGV0eXBlICIkZG93bmxvYWRfZmlsZW5hbWUiCgppZiB0
ZXN0ICJ4JHRtcF9kaXIiICE9ICJ4IjsgdGhlbgogIHJtIC1yICIkdG1wX2RpciIKZmkKCiMjIyMj
IyMjIyMjIwojIGVuZCBvZiBpbnN0YWxsX3BhY2thZ2Uuc2gKIyMjIyMjIyMjIyMjCg==`;

  private LinuxHabitatInstallSHA256 = "128348F4E57AC564DF46EF20398E1BA0B0FE9B83CB4025F477F68C9BE1D3C298";
  private LinuxHabitatInstall = `IyEvYmluL2Jhc2gKIwpzZXQgLWVvdSBwaXBlZmFpbAoKIyBJZiB0aGUgdmFyaWFibGUgYCRERUJV
  R2AgaXMgc2V0LCB0aGVuIHByaW50IHRoZSBzaGVsbCBjb21tYW5kcyBhcyB3ZSBleGVjdXRlLgpp
  ZiBbIC1uICIke0RFQlVHOi19IiBdOyB0aGVuIHNldCAteDsgZmkKCnJlYWRvbmx5IHBjaW9fcm9v
  dD0iaHR0cHM6Ly9wYWNrYWdlcy5jaGVmLmlvL2ZpbGVzIgpleHBvcnQgSEFCX0xJQ0VOU0U9ImFj
  Y2VwdC1uby1wZXJzaXN0IgoKbWFpbigpIHsKICAjIFVzZSBzdGFibGUgQmludHJheSBjaGFubmVs
  IGJ5IGRlZmF1bHQKICBjaGFubmVsPSJzdGFibGUiCiAgIyBTZXQgYW4gZW1wdHkgdmVyc2lvbiB2
  YXJpYWJsZSwgc2lnbmFsaW5nIHdlIHdhbnQgdGhlIGxhdGVzdCByZWxlYXNlCiAgdmVyc2lvbj0i
  IgoKICAjIFBhcnNlIGNvbW1hbmQgbGluZSBmbGFncyBhbmQgb3B0aW9ucy4KICB3aGlsZSBnZXRv
  cHRzICJjOmh2OnQ6IiBvcHQ7IGRvCiAgICBjYXNlICIke29wdH0iIGluCiAgICAgIGMpCiAgICAg
  ICAgY2hhbm5lbD0iJHtPUFRBUkd9IgogICAgICAgIDs7CiAgICAgIGgpCiAgICAgICAgcHJpbnRf
  aGVscAogICAgICAgIGV4aXQgMAogICAgICAgIDs7CiAgICAgIHYpCiAgICAgICAgdmVyc2lvbj0i
  JHtPUFRBUkd9IgogICAgICAgIDs7CiAgICAgIHQpCiAgICAgICAgdGFyZ2V0PSIke09QVEFSR30i
  CiAgICAgICAgOzsKICAgICAgXD8pCiAgICAgICAgZWNobyAiIiA+JjIKICAgICAgICBwcmludF9o
  ZWxwID4mMgogICAgICAgIGV4aXRfd2l0aCAiSW52YWxpZCBvcHRpb24iIDEKICAgICAgICA7Owog
  ICAgZXNhYwogIGRvbmUKCiAgaW5mbyAiSW5zdGFsbGluZyBIYWJpdGF0ICdoYWInIHByb2dyYW0i
  CiAgY3JlYXRlX3dvcmtkaXIKICBnZXRfcGxhdGZvcm0KICB2YWxpZGF0ZV90YXJnZXQKICBkb3du
  bG9hZF9hcmNoaXZlICIkdmVyc2lvbiIgIiRjaGFubmVsIiAiJHRhcmdldCIKICB2ZXJpZnlfYXJj
  aGl2ZQogIGV4dHJhY3RfYXJjaGl2ZQogIGluc3RhbGxfaGFiCiAgcHJpbnRfaGFiX3ZlcnNpb24K
  ICBpbmZvICJJbnN0YWxsYXRpb24gb2YgSGFiaXRhdCAnaGFiJyBwcm9ncmFtIGNvbXBsZXRlLiIK
  fQoKcHJpbnRfaGVscCgpIHsKICBuZWVkX2NtZCBjYXQKICBuZWVkX2NtZCBiYXNlbmFtZQoKICBs
  b2NhbCBfY21kCiAgX2NtZD0iJChiYXNlbmFtZSAiJHswfSIpIgogIGNhdCA8PFVTQUdFCiR7X2Nt
  ZH0KCkF1dGhvcnM6IFRoZSBIYWJpdGF0IE1haW50YWluZXJzIDxodW1hbnNAaGFiaXRhdC5zaD4K
  Ckluc3RhbGxzIHRoZSBIYWJpdGF0ICdoYWInIHByb2dyYW0uCgpVU0FHRToKICAgICR7X2NtZH0g
  W0ZMQUdTXQoKRkxBR1M6CiAgICAtYyAgICBTcGVjaWZpZXMgYSBjaGFubmVsIFt2YWx1ZXM6IHN0
  YWJsZSwgdW5zdGFibGVdIFtkZWZhdWx0OiBzdGFibGVdCiAgICAtaCAgICBQcmludHMgaGVscCBp
  bmZvcm1hdGlvbgogICAgLXYgICAgU3BlY2lmaWVzIGEgdmVyc2lvbiAoZXg6IDAuMTUuMCwgMC4x
  NS4wLzIwMTYxMjIyMjE1MzExKQogICAgLXQgICAgU3BlY2lmaWVzIHRoZSBBY3RpdmVUYXJnZXQg
  b2YgdGhlICdoYWInIHByb2dyYW0gdG8gZG93bmxvYWQuCiAgICAgICAgICAgIFt2YWx1ZXM6IHg4
  Nl82NC1saW51eCwgeDg2XzY0LWxpbnV4LWtlcm5lbDJdIFtkZWZhdWx0OiB4ODZfNjQtbGludXhd
  CiAgICAgICAgICAgIFRoaXMgb3B0aW9uIGlzIG9ubHkgdmFsaWQgb24gTGludXggcGxhdGZvcm1z
  CgpFTlZJUk9OTUVOVCBWQVJJQUJMRVM6CiAgICAgU1NMX0NFUlRfRklMRSAgIGFsbG93cyB5b3Ug
  dG8gdmVyaWZ5IGFnYWluc3QgYSBjdXN0b20gY2VydCBzdWNoIGFzIG9uZQogICAgICAgICAgICAg
  ICAgICAgICBnZW5lcmF0ZWQgZnJvbSBhIGNvcnBvcmF0ZSBmaXJld2FsbAoKVVNBR0UKfQoKY3Jl
  YXRlX3dvcmtkaXIoKSB7CiAgbmVlZF9jbWQgbWt0ZW1wCiAgbmVlZF9jbWQgcm0KICBuZWVkX2Nt
  ZCBta2RpcgoKICBpZiBbIC1uICIke1RNUERJUjotfSIgXTsgdGhlbgogICAgbG9jYWwgX3RtcD0i
  JHtUTVBESVJ9IgogIGVsaWYgWyAtZCAvdmFyL3RtcCBdOyB0aGVuCiAgICBsb2NhbCBfdG1wPS92
  YXIvdG1wCiAgZWxzZQogICAgbG9jYWwgX3RtcD0vdG1wCiAgZmkKCiAgd29ya2Rpcj0iJChta3Rl
  bXAgLWQgLXAgIiRfdG1wIiAyPiAvZGV2L251bGwgfHwgbWt0ZW1wIC1kICIke190bXB9L2hhYi5Y
  WFhYIikiCiAgIyBBZGQgYSB0cmFwIHRvIGNsZWFuIHVwIGFueSBpbnRlcnJ1cHRlZCBmaWxlIGRv
  d25sb2FkcwogICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1NAogIHRyYXAgJ2NvZGU9JD87IHJt
  IC1yZiAkd29ya2RpcjsgZXhpdCAkY29kZScgSU5UIFRFUk0gRVhJVAogIGNkICIke3dvcmtkaXJ9
  Igp9CgpnZXRfcGxhdGZvcm0oKSB7CiAgbmVlZF9jbWQgdW5hbWUKICBuZWVkX2NtZCB0cgoKICBs
  b2NhbCBfb3N0eXBlCiAgX29zdHlwZT0iJCh1bmFtZSAtcykiCgogIGNhc2UgIiR7X29zdHlwZX0i
  IGluCiAgICBEYXJ3aW58TGludXgpCiAgICAgIHN5cz0iJCh1bmFtZSAtcyB8IHRyICdbOnVwcGVy
  Ol0nICdbOmxvd2VyOl0nKSIKICAgICAgYXJjaD0iJCh1bmFtZSAtbSB8IHRyICdbOnVwcGVyOl0n
  ICdbOmxvd2VyOl0nKSIKICAgICAgOzsKICAgICopCiAgICAgIGV4aXRfd2l0aCAiVW5yZWNvZ25p
  emVkIE9TIHR5cGUgd2hlbiBkZXRlcm1pbmluZyBwbGF0Zm9ybTogJHtfb3N0eXBlfSIgMgogICAg
  ICA7OwogIGVzYWMKCiAgY2FzZSAiJHtzeXN9IiBpbgogICAgZGFyd2luKQogICAgICBuZWVkX2Nt
  ZCBzaGFzdW0KCiAgICAgIGV4dD16aXAKICAgICAgc2hhc3VtX2NtZD0ic2hhc3VtIC1hIDI1NiIK
  ICAgICAgOzsKICAgIGxpbnV4KQogICAgICBuZWVkX2NtZCBzaGEyNTZzdW0KCiAgICAgIGV4dD10
  YXIuZ3oKICAgICAgc2hhc3VtX2NtZD0ic2hhMjU2c3VtIgogICAgICA7OwogICAgKikKICAgICAg
  ZXhpdF93aXRoICJVbnJlY29nbml6ZWQgc3lzIHR5cGUgd2hlbiBkZXRlcm1pbmluZyBwbGF0Zm9y
  bTogJHtzeXN9IiAzCiAgICAgIDs7CiAgZXNhYwoKICBpZiBbIC16ICIke3RhcmdldDotfSIgXTsg
  dGhlbgogICAgdGFyZ2V0PSIke2FyY2h9LSR7c3lzfSIKICBmaQp9CgojIFZhbGlkYXRlIHRoZSBD
  TEkgVGFyZ2V0IHJlcXVlc3RlZC4gIEluIG1vc3QgY2FzZXMgJHthcmNofS0ke3N5c30KIyBmb3Ig
  dGhlIGN1cnJlbnQgc3lzdGVtIGlzIHRoZSBvbmx5IHZhbGlkIFRhcmdldC4gIEluIHRoZSBjYXNl
  IG9mCiMgeDg2XzY0LWxpbnV4IHN5c3RlbXMgd2UgYWxzbyBuZWVkIHRvIHN1cHBvcnQgdGhlIHg4
  Nl82NC1saW51eC1rZXJuZWwyCiMgVGFyZ2V0LiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbGlkIFRh
  cmdldHMgZm9yIHRoZSBjdXJyZW50IHN5c3RlbSwKIyBhZGRpbmcgYW55IHZhbGlkIGFsdGVybmF0
  ZSBUYXJnZXRzLCBhbmQgY2hlY2tzIGlmIHRoZSByZXF1ZXN0ZWQKIyBUYXJnZXQgaXMgcHJlc2Vu
  dCBpbiB0aGUgYXJyYXkuCnZhbGlkYXRlX3RhcmdldCgpIHsKICBsb2NhbCB2YWxpZF90YXJnZXRz
  PSgiJHthcmNofS0ke3N5c30iKQogIGNhc2UgIiR7c3lzfSIgaW4KICAgbGludXgpCiAgICB2YWxp
  ZF90YXJnZXRzKz0oIng4Nl82NC1saW51eC1rZXJuZWwyIikKICAgIDs7CiAgZXNhYwoKICBpZiAh
  IChfYXJyYXlfY29udGFpbnMgIiR7dGFyZ2V0fSIgIiR7dmFsaWRfdGFyZ2V0c1tAXX0iKSA7IHRo
  ZW4KICAgIGxvY2FsIF92dHMKICAgIHByaW50ZiAtdiBfdnRzICIlcywgIiAiJHt2YWxpZF90YXJn
  ZXRzW0BdfSIKICAgIF9lPSIke3RhcmdldH0gaXMgbm90IGEgdmFsaWQgdGFyZ2V0IGZvciB0aGlz
  IHN5c3RlbS4gUGxlYXNlIHNwZWNpZnkgb25lIG9mOiBbJHtfdnRzJSwgfV0iCiAgICBleGl0X3dp
  dGggIiRfZSIgNwogIGZpCn0KCmRvd25sb2FkX2FyY2hpdmUoKSB7CiAgbmVlZF9jbWQgbXYKICAK
  ICBsb2NhbCBfdmVyc2lvbj0iJHsxOi1sYXRlc3R9IgogIGxvY2FsIC1yIF9jaGFubmVsPSIkezI6
  P30iCiAgbG9jYWwgLXIgX3RhcmdldD0iJHszOj99IgogIGxvY2FsIHVybAoKICBpZiBbICIkX3Zl
  cnNpb24iID09ICJsYXRlc3QiIF07IHRoZW4KICAgIHVybD0iJHtwY2lvX3Jvb3R9LyR7X2NoYW5u
  ZWx9L2hhYml0YXQvbGF0ZXN0L2hhYi0ke190YXJnZXR9LiR7ZXh0fSIKICBlbHNlIAogICAgbG9j
  YWwgLXIgX3JlbGVhc2U9IiQoZWNobyAiJHtfdmVyc2lvbn0iIHxjdXQgLWQnLycgLWYyKSIKICAg
  IGlmIFsgIiR7X3JlbGVhc2U6K3JlbGVhc2V9IiA9PSAicmVsZWFzZSIgXTsgdGhlbgogICAgICBf
  dmVyc2lvbj0iJChlY2hvICIke192ZXJzaW9ufSIgfGN1dCAtZCcvJyAtZjEpIgogICAgICBpbmZv
  ICJwYWNrYWdlcy5jaGVmLmlvIGRvZXMgbm90IHN1cHBvcnQgJ3ZlcnNpb24vcmVsZWFzZScgZm9y
  bWF0LiBVc2luZyAkX3ZlcnNpb24gZm9yIHRoZSB2ZXJzaW9uIgogICAgZmkKICAgIHVybD0iJHtw
  Y2lvX3Jvb3R9L2hhYml0YXQvJHtfdmVyc2lvbn0vaGFiLSR7X3RhcmdldH0uJHtleHR9IgogIGZp
  CiAgCiAgZGxfZmlsZSAiJHt1cmx9IiAiJHt3b3JrZGlyfS9oYWItJHtfdmVyc2lvbn0uJHtleHR9
  IgogIGRsX2ZpbGUgIiR7dXJsfS5zaGEyNTZzdW0iICIke3dvcmtkaXJ9L2hhYi0ke192ZXJzaW9u
  fS4ke2V4dH0uc2hhMjU2c3VtIgoKICBhcmNoaXZlPSJoYWItJHtfdGFyZ2V0fS4ke2V4dH0iCiAg
  c2hhX2ZpbGU9ImhhYi0ke190YXJnZXR9LiR7ZXh0fS5zaGEyNTZzdW0iCgogIG12IC12ICIke3dv
  cmtkaXJ9L2hhYi0ke192ZXJzaW9ufS4ke2V4dH0iICIke2FyY2hpdmV9IgogIG12IC12ICIke3dv
  cmtkaXJ9L2hhYi0ke192ZXJzaW9ufS4ke2V4dH0uc2hhMjU2c3VtIiAiJHtzaGFfZmlsZX0iCiAg
  CiAgaWYgY29tbWFuZCAtdiBncGcgPi9kZXYvbnVsbDsgdGhlbgogICAgaW5mbyAiR251UEcgdG9v
  bGluZyBmb3VuZCwgZG93bmxvYWRpbmcgc2lnbmF0dXJlcyIKICAgIHNoYV9zaWdfZmlsZT0iJHth
  cmNoaXZlfS5zaGEyNTZzdW0uYXNjIgogICAga2V5X2ZpbGU9IiR7d29ya2Rpcn0vY2hlZi5hc2Mi
  CiAgICBsb2NhbCBfa2V5X3VybD0iaHR0cHM6Ly9wYWNrYWdlcy5jaGVmLmlvL2NoZWYuYXNjIgoK
  ICAgIGRsX2ZpbGUgIiR7dXJsfS5zaGEyNTZzdW0uYXNjIiAiJHtzaGFfc2lnX2ZpbGV9IgogICAg
  ZGxfZmlsZSAiJHtfa2V5X3VybH0iICIke2tleV9maWxlfSIgCiAgZmkKfQoKdmVyaWZ5X2FyY2hp
  dmUoKSB7CiAgaWYgY29tbWFuZCAtdiBncGcgPi9kZXYvbnVsbDsgdGhlbgogICAgaW5mbyAiR251
  UEcgdG9vbGluZyBmb3VuZCwgdmVyaWZ5aW5nIHRoZSBzaGFzdW0gZGlnZXN0IGlzIHByb3Blcmx5
  IHNpZ25lZCIKCiAgICBncGcgLS1uby1wZXJtaXNzaW9uLXdhcm5pbmcgLS1kZWFybW9yICIke2tl
  eV9maWxlfSIKICAgIGdwZyAtLW5vLXBlcm1pc3Npb24td2FybmluZyBcCiAgICAgIC0ta2V5cmlu
  ZyAiJHtrZXlfZmlsZX0uZ3BnIiAtLXZlcmlmeSAiJHtzaGFfc2lnX2ZpbGV9IgogIGZpCgogIGlu
  Zm8gIlZlcmlmeWluZyB0aGUgc2hhc3VtIGRpZ2VzdCBtYXRjaGVzIHRoZSBkb3dubG9hZGVkIGFy
  Y2hpdmUiCiAgJHtzaGFzdW1fY21kfSAtYyAiJHtzaGFfZmlsZX0iCn0KCmV4dHJhY3RfYXJjaGl2
  ZSgpIHsKICBuZWVkX2NtZCBzZWQKCiAgaW5mbyAiRXh0cmFjdGluZyAke2FyY2hpdmV9IgogIGNh
  c2UgIiR7ZXh0fSIgaW4KICAgIHRhci5neikKICAgICAgbmVlZF9jbWQgemNhdAogICAgICBuZWVk
  X2NtZCB0YXIKCiAgICAgIGFyY2hpdmVfZGlyPSIke2FyY2hpdmUlLnRhci5nen0iCiAgICAgIG1r
  ZGlyICIke2FyY2hpdmVfZGlyfSIKICAgICAgemNhdCAiJHthcmNoaXZlfSIgfCB0YXIgLS1leHRy
  YWN0IC0tZGlyZWN0b3J5ICIke2FyY2hpdmVfZGlyfSIgLS1zdHJpcC1jb21wb25lbnRzPTEKCiAg
  ICAgIDs7CiAgICB6aXApCiAgICAgIG5lZWRfY21kIHVuemlwCgogICAgICBhcmNoaXZlX2Rpcj0i
  JHthcmNoaXZlJS56aXB9IgogICAgICAjIC1qICJqdW5rIHBhdGhzIiBTdHJpcHMgbGVhZGluZyBw
  YXRocyBmcm9tIGZpbGVzLAogICAgICB1bnppcCAtaiAiJHthcmNoaXZlfSIgLWQgIiR7YXJjaGl2
  ZV9kaXJ9IgogICAgICA7OwogICAgKikKICAgICAgZXhpdF93aXRoICJVbnJlY29nbml6ZWQgZmls
  ZSBleHRlbnNpb24gd2hlbiBleHRyYWN0aW5nOiAke2V4dH0iIDQKICAgICAgOzsKICBlc2FjCn0K
  Cmluc3RhbGxfaGFiKCkgewogIGNhc2UgIiR7c3lzfSIgaW4KICAgIGRhcndpbikKICAgICAgbmVl
  ZF9jbWQgbWtkaXIKICAgICAgbmVlZF9jbWQgaW5zdGFsbAoKICAgICAgaW5mbyAiSW5zdGFsbGlu
  ZyBoYWIgaW50byAvdXNyL2xvY2FsL2JpbiIKICAgICAgbWtkaXIgLXB2IC91c3IvbG9jYWwvYmlu
  CiAgICAgIGluc3RhbGwgLXYgIiR7YXJjaGl2ZV9kaXJ9Ii9oYWIgL3Vzci9sb2NhbC9iaW4vaGFi
  CiAgICAgIDs7CiAgICBsaW51eCkKICAgICAgbG9jYWwgX2lkZW50PSJjb3JlL2hhYiIKCiAgICAg
  IGlmIFsgLW4gIiR7dmVyc2lvbi19IiBdICYmIFsgIiR7dmVyc2lvbn0iICE9ICJsYXRlc3QiIF07
  IHRoZW4KICAgICAgICBfaWRlbnQrPSIvJHZlcnNpb24iOwogICAgICBmaQoKICAgICAgaW5mbyAi
  SW5zdGFsbGluZyBIYWJpdGF0IHBhY2thZ2UgdXNpbmcgdGVtcG9yYXJpbHkgZG93bmxvYWRlZCBo
  YWIiCiAgICAgICMgTk9URTogRm9yIHBlb3BsZSAocmlnaHRseSkgd29uZGVyaW5nIHdoeSB3ZSBk
  b3dubG9hZCBoYWIgb25seSB0byB1c2UgaXQKICAgICAgIyB0byBpbnN0YWxsIGhhYiBmcm9tIEJ1
  aWxkZXIsIHRoZSBtYWluIHJlYXNvbiBpcyBiZWNhdXNlIGl0IGFsbG93cyAvYmluL2hhYgogICAg
  ICAjIHRvIGJlIGEgYmlubGluaywgbWVhbmluZyB0aGF0IGZ1dHVyZSB1cGdyYWRlcyBjYW4gYmUg
  ZWFzaWx5IGRvbmUgdmlhCiAgICAgICMgaGFiIHBrZyBpbnN0YWxsIGNvcmUvaGFiIC1iZiBhbmQg
  ZXZlcnl0aGluZyB3aWxsIEp1c3QgV29yay4gSWYgd2UgcHV0CiAgICAgICMgdGhlIGhhYiB3ZSBk
  b3dubG9hZGVkIGludG8gL2JpbiwgdGhlbiBmdXR1cmUgaGFiIHVwZ3JhZGVzIGRvbmUgdmlhIGhh
  YgogICAgICAjIGl0c2VsZiB3b24ndCB3b3JrIC0geW91J2QgbmVlZCB0byBydW4gdGhpcyBzY3Jp
  cHQgZXZlcnkgdGltZSB5b3Ugd2FudGVkCiAgICAgICMgdG8gdXBncmFkZSBoYWIsIHdoaWNoIGlz
  IG5vdCBpbnR1aXRpdmUuIFB1dHRpbmcgaXQgaW50byBhIHBsYWNlIG90aGVyIHRoYW4KICAgICAg
  IyAvYmluIG1lYW5zIG5vdyB5b3UgaGF2ZSBtdWx0aXBsZSBjb3BpZXMgb2YgaGFiIG9uIHlvdXIg
  c3lzdGVtIGFuZCBwYXRoaW5nCiAgICAgICMgc2hlbmFuaWdhbnMgbWlnaHQgZW5zdWUuIFJhdGhl
  ciB0aGFuIGRlYWwgd2l0aCB0aGF0IG1lc3MsIHdlIGRvIGl0IHRoaXMKICAgICAgIyB3YXkuCiAg
  ICAgICIke2FyY2hpdmVfZGlyfS9oYWIiIHBrZyBpbnN0YWxsIC0tYmlubGluayAtLWZvcmNlIC0t
  Y2hhbm5lbCAiJGNoYW5uZWwiICIkX2lkZW50IgogICAgICA7OwogICAgKikKICAgICAgZXhpdF93
  aXRoICJVbnJlY29nbml6ZWQgc3lzIHdoZW4gaW5zdGFsbGluZzogJHtzeXN9IiA1CiAgICAgIDs7
  CiAgZXNhYwp9CgpwcmludF9oYWJfdmVyc2lvbigpIHsKICBuZWVkX2NtZCBoYWIKCiAgaW5mbyAi
  Q2hlY2tpbmcgaW5zdGFsbGVkIGhhYiB2ZXJzaW9uIgogIGhhYiAtLXZlcnNpb24KfQoKbmVlZF9j
  bWQoKSB7CiAgaWYgISBjb21tYW5kIC12ICIkMSIgPiAvZGV2L251bGwgMj4mMTsgdGhlbgogICAg
  ZXhpdF93aXRoICJSZXF1aXJlZCBjb21tYW5kICckMScgbm90IGZvdW5kIG9uIFBBVEgiIDEyNwog
  IGZpCn0KCmluZm8oKSB7CiAgZWNobyAiLS0+IGhhYi1pbnN0YWxsOiAkMSIKfQoKd2FybigpIHsK
  ICBlY2hvICJ4eHggaGFiLWluc3RhbGw6ICQxIiA+JjIKfQoKZXhpdF93aXRoKCkgewogIHdhcm4g
  IiQxIgogIGV4aXQgIiR7MjotMTB9Igp9CgpfYXJyYXlfY29udGFpbnMoKSB7CiAgbG9jYWwgZQog
  IGZvciBlIGluICIke0A6Mn0iOyBkbwogICAgaWYgW1sgIiRlIiA9PSAiJDEiIF1dOyB0aGVuCiAg
  ICAgIHJldHVybiAwCiAgICBmaQogIGRvbmUKICByZXR1cm4gMQp9CgpkbF9maWxlKCkgewogIGxv
  Y2FsIF91cmw9IiR7MX0iCiAgbG9jYWwgX2RzdD0iJHsyfSIKICBsb2NhbCBfY29kZQogIGxvY2Fs
  IF93Z2V0X2V4dHJhX2FyZ3M9IiIKICBsb2NhbCBfY3VybF9leHRyYV9hcmdzPSIiCgogICMgQXR0
  ZW1wdCB0byBkb3dubG9hZCB3aXRoIHdnZXQsIGlmIGZvdW5kLiBJZiBzdWNjZXNzZnVsLCBxdWlj
  ayByZXR1cm4KICBpZiBjb21tYW5kIC12IHdnZXQgPiAvZGV2L251bGw7IHRoZW4KICAgIGluZm8g
  IkRvd25sb2FkaW5nIHZpYSB3Z2V0OiAke191cmx9IgoKICAgIGlmIFsgLW4gIiR7U1NMX0NFUlRf
  RklMRTotfSIgXTsgdGhlbgogICAgICB3Z2V0ICR7X3dnZXRfZXh0cmFfYXJnczorIi0tY2EtY2Vy
  dGlmaWNhdGU9JHtTU0xfQ0VSVF9GSUxFfSJ9IC1xIC1PICIke19kc3R9IiAiJHtfdXJsfSIKICAg
  IGVsc2UKICAgICAgd2dldCAtcSAtTyAiJHtfZHN0fSIgIiR7X3VybH0iCiAgICBmaQoKICAgIF9j
  b2RlPSIkPyIKCiAgICBpZiBbICRfY29kZSAtZXEgMCBdOyB0aGVuCiAgICAgIHJldHVybiAwCiAg
  ICBlbHNlCiAgICAgIGxvY2FsIF9lPSJ3Z2V0IGZhaWxlZCB0byBkb3dubG9hZCBmaWxlLCBwZXJo
  YXBzIHdnZXQgZG9lc24ndCBoYXZlIgogICAgICBfZT0iJF9lIFNTTCBzdXBwb3J0IGFuZC9vciBu
  byBDQSBjZXJ0aWZpY2F0ZXMgYXJlIHByZXNlbnQ/IgogICAgICB3YXJuICIkX2UiCiAgICBmaQog
  IGZpCgogICMgQXR0ZW1wdCB0byBkb3dubG9hZCB3aXRoIGN1cmwsIGlmIGZvdW5kLiBJZiBzdWNj
  ZXNzZnVsLCBxdWljayByZXR1cm4KICBpZiBjb21tYW5kIC12IGN1cmwgPiAvZGV2L251bGw7IHRo
  ZW4KICAgIGluZm8gIkRvd25sb2FkaW5nIHZpYSBjdXJsOiAke191cmx9IgoKICAgIGlmIFsgLW4g
  IiR7U1NMX0NFUlRfRklMRTotfSIgXTsgdGhlbgogICAgICBjdXJsICR7X2N1cmxfZXh0cmFfYXJn
  czorIi0tY2FjZXJ0ICR7U1NMX0NFUlRfRklMRX0ifSAtc1NmTCAiJHtfdXJsfSIgLW8gIiR7X2Rz
  dH0iCiAgICBlbHNlCiAgICAgIGN1cmwgLXNTZkwgIiR7X3VybH0iIC1vICIke19kc3R9IgogICAg
  ZmkKCiAgICBfY29kZT0iJD8iCgogICAgaWYgWyAkX2NvZGUgLWVxIDAgXTsgdGhlbgogICAgICBy
  ZXR1cm4gMAogICAgZWxzZQogICAgICBsb2NhbCBfZT0iY3VybCBmYWlsZWQgdG8gZG93bmxvYWQg
  ZmlsZSwgcGVyaGFwcyBjdXJsIGRvZXNuJ3QgaGF2ZSIKICAgICAgX2U9IiRfZSBTU0wgc3VwcG9y
  dCBhbmQvb3Igbm8gQ0EgY2VydGlmaWNhdGVzIGFyZSBwcmVzZW50PyIKICAgICAgd2FybiAiJF9l
  IgogICAgZmkKICBmaQoKICAjIElmIHdlIHJlYWNoIHRoaXMgcG9pbnQsIHdnZXQgYW5kIGN1cmwg
  aGF2ZSBmYWlsZWQgYW5kIHdlJ3JlIG91dCBvZiBvcHRpb25zCiAgZXhpdF93aXRoICJSZXF1aXJl
  ZDogU1NMLWVuYWJsZWQgJ2N1cmwnIG9yICd3Z2V0JyBvbiBQQVRIIHdpdGgiIDYKfQoKbWFpbiAi
  JEAiIHx8IGV4aXQgOTkK`;

  /**
   * GetScript is responsible for writing out the Base64 encoded scripts (above)
   * to disk on the agent so that the component can be installed
   *
   * The component name is passed so that the correct script can be decoded, e.g.
   * Chef or Habitat
   *
   * @param isWindows
   * @param componentName
   */

  public GetScript(isWindows: boolean, componentName: string): string {
    let result: string;
    let encodedString: string;

    if (componentName === "habitat") {
      if (isWindows) {
        encodedString = this.WindowsHabitatInstall;
      } else {
        encodedString = this.LinuxHabitatInstall;
      }
    } else {
      if (isWindows) {
        encodedString = this.WindowsInstall;
      } else {
        encodedString = this.LinuxInstall;
      }
    }

    result = Buffer.from(encodedString, "base64").toString();

    return result;
  }

  public VerifyScript(isWindows: boolean, path: string, component: string): boolean {
    let result = false;
    let checksum = "";

    // select the correct checksum based on the component
    if (component === "habitat") {
      checksum = isWindows ? this.WindowsHabitatInstallSHA265 : this.LinuxHabitatInstallSHA256;
    } else {
      checksum = isWindows ? this.WindowsInstallSHA256 : this.LinuxInstallSHA256;
    }

    // read in the file contents
    let contents = readFileSync(path, "utf-8");

    // determine the checksum of the the file
    let sha256 = SHA256(contents).toString().toUpperCase().trim();

    // if the contents of the file match the checksum of the data then the verification is good
    if (checksum === sha256) {
      result = true;
    } else {
      tl.debug(sprintf("Expected '%s', got '%s'", checksum, sha256));
      tl.debug(contents);
    }

    return result;
  }
}